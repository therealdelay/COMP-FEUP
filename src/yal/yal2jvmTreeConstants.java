/* Generated By:JavaCC: Do not edit this line. yal2jvmTreeConstants.java Version 7.0.2 */
package yal;

public interface yal2jvmTreeConstants
{
  public int JJTMODULE = 0;
  public int JJTDECLARATION = 1;
  public int JJTFUNCTION = 2;
  public int JJTVARLIST = 3;
  public int JJTARRAYELEMENT = 4;
  public int JJTELEMENT = 5;
  public int JJTSCALARELEMENT = 6;
  public int JJTSTMTLST = 7;
  public int JJTVOID = 8;
  public int JJTSTMT = 9;
  public int JJTASSIGN = 10;
  public int JJTLHS = 11;
  public int JJTRHS = 12;
  public int JJTARRAYSIZE = 13;
  public int JJTTERM = 14;
  public int JJTEXPRTEST = 15;
  public int JJTWHILE = 16;
  public int JJTIF = 17;
  public int JJTCALL = 18;
  public int JJTARGUMENTLIST = 19;
  public int JJTARGUMENT = 20;
  public int JJTARRAYACCESS = 21;
  public int JJTSCALARACCESS = 22;
  public int JJTINDEX = 23;
  public int JJTINCERRORCOUNTER = 24;
  public int JJTGENERATESYMBOLTABLE = 25;
  public int JJTCHECKARGSARENOTGLOBALS = 26;
  public int JJTCHECKRETURNVARIABLE = 27;
  public int JJTUPDATESYMBOLTABLEFUNCTIONARGUMENTS = 28;
  public int JJTGETTYPEOFTERM = 29;
  public int JJTCHECKCOMPARISONTYPES = 30;
  public int JJTUPDATESYMBOLTABLEFUNCTIONASSIGNS = 31;
  public int JJTUPDATESYMBOLTABLEFUNCTIONFUNCTIONCALLS = 32;


  public String[] jjtNodeName = {
    "Module",
    "Declaration",
    "Function",
    "Varlist",
    "ArrayElement",
    "Element",
    "ScalarElement",
    "Stmtlst",
    "void",
    "Stmt",
    "Assign",
    "Lhs",
    "Rhs",
    "ArraySize",
    "Term",
    "Exprtest",
    "While",
    "If",
    "Call",
    "ArgumentList",
    "Argument",
    "ArrayAccess",
    "ScalarAccess",
    "Index",
    "incErrorCounter",
    "generateSymbolTable",
    "checkArgsAreNotGlobals",
    "checkReturnVariable",
    "updateSymbolTableFunctionArguments",
    "getTypeOfTerm",
    "checkComparisonTypes",
    "updateSymbolTableFunctionAssigns",
    "updateSymbolTableFunctionFunctionCalls",
  };
}
/* JavaCC - OriginalChecksum=78fce6b424b183e6e6ee5274ac243d32 (do not edit this line) */
