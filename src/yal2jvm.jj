/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal2jvm.jj */
/*@egen*/options{

               
}

PARSER_BEGIN(yal2jvm)



import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.*;

public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();

/*@egen*/
    public static int error_counter = 0;
    private static SimpleNode astRoot = null;
    public static void main(String args[]) throws ParseException, IOException {
        InputStream f = null;

        try {
            f = new FileInputStream("../yalExamples/" + args[0]);
        }catch(FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        //System.out.println("File: " + args[0]);

        yal2jvm parser = new yal2jvm(f);

        astRoot = parser.Module();

        System.out.print("Error count: " + error_counter + "\n\n");
        
        // System.out.println("AST:");
        // astRoot.dump("");

        // buildSymbolTable(astRoot);

        SymbolTable symbolTable = generateSymbolTable(astRoot);
        // generateJavaBytecodes(astRoot, symbolTable);
        System.out.println(symbolTable);
        
        System.out.print("\n\n\n");
    }
}

PARSER_END(yal2jvm)

SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
TOKEN : {
    <RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
    | <ADDSUB_OP: "+" | "-">
    | <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
    | <BITWISE_OP: "&" | "|" | "^">
    | <NOT_OP: "!">
    | <WHILE: "while">
    | <IF: "if">
    | <ELSE: "else">
    | <ASSIGN: "=">
    | <ASPA: "\"">
    | <LPAR: "(">
    | <RPAR: ")">
    | <VIRG: ",">
    | <PVIRG: ";">
    | <LCHAVETA: "{">
    | <RCHAVETA: "}">
    | <FUNCTION: "function">
    | <MODULE: "module">
    | <SIZE: "size">
}

TOKEN : {
    <INTEGER: (<DIGIT>)+>
    | <ID: <LETTER> (<LETTER> | <DIGIT>)*>
    | <#LETTER: ["$","A"-"Z","_","a"-"z"]>
    | <#DIGIT: ["0"-"9"]>
    | <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Module() : {/*@bgen(jjtree) Module */
                       ASTModule jjtn000 = new ASTModule(JJTMODULE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Module */
    try {
/*@egen*/
    try{
        <MODULE> t=<ID>{jjtn000.jjtSetValue(t.image);} <LCHAVETA> (LOOKAHEAD(3) Declaration())* (Function())* <RCHAVETA>
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN MODULE " + e.toString());
        incErrorCounter();
        int[] kinds = {RCHAVETA, EOF};
        error_skipto(kinds);
    }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Declaration() : {/*@bgen(jjtree) Declaration */
                      ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, t2;}{/*@bgen(jjtree) Declaration */
    try {
/*@egen*/

    t=<ID>{jjtn000.jjtSetValue(t.image);} ["[" "]" {jjtn000.jjtSetArrayType();}]
    [
    <ASSIGN>
    try{
        (("[" ArraySize() "]") {jjtn000.jjtSetArrayType();} | [<ADDSUB_OP>] t2=<INTEGER>{jjtn000.jjtSetIntType();})
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN DECLARATION " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
    }
    ]
    try{
        <PVIRG>
    }
    catch(ParseException e){
        System.out.println("EXCEPTION IN DECLARATION " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Function() : {/*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}{/*@bgen(jjtree) Function */
    try {
/*@egen*/

    try{
        <FUNCTION>{jjtn000.jjtSetType(SimpleNode.Type.VOID);} [LOOKAHEAD(2) t2=<ID>{jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetIntType();} ["[" "]"{jjtn000.jjtSetArrayType();}] <ASSIGN>] t1=<ID>{jjtn000.jjtSetValue(t1.image);}
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN FUNCTION " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG, LCHAVETA, LPAR, ID};
        error_skipto(kinds);
    }

    try{
        <LPAR> [Varlist()] <RPAR>
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN FUNCTION " + e.toString());
        incErrorCounter();
        int[] kinds = {RPAR};
        error_skipto(kinds);
    }
    <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Varlist() : {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Varlist */
    try {
/*@egen*/
    (Element()) ( <VIRG> Element() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayElement() : {/*@bgen(jjtree) ArrayElement */
                       ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayElement */
    try {
/*@egen*/
    t=<ID>{jjtn000.jjtSetValue(t.image);} "[" "]"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Element() : {/*@bgen(jjtree) Element */
                  ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Element */
    try {
/*@egen*/
    t=<ID>{jjtn000.jjtSetValue(t.image); jjtn000.jjtSetIntType();} ["[" "]"{jjtn000.jjtSetArrayType();}]/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ScalarElement() : {/*@bgen(jjtree) ScalarElement */
                        ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ScalarElement */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmtlst() : {/*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmtlst */
    try {
/*@egen*/
    ( Stmt() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SpecialStmtlst()       : {}
{
    Stmtlst() <RCHAVETA>
}

void Stmt() : {/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
    try {
/*@egen*/
    try{
        If() | While() | LOOKAHEAD(3) Assign() | Callstmt()
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN STMT " + e.toString());
        incErrorCounter();
        int[] kinds = {RPAR, PVIRG, LCHAVETA};
        error_skipto(kinds);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Assign() : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    Lhs() <ASSIGN>
    try{
        Rhs() <PVIRG>
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN ASSIGN " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Lhs() : {/*@bgen(jjtree) Lhs */
              ASTLhs jjtn000 = new ASTLhs(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Lhs */
    try {
/*@egen*/
    t=<ID>{jjtn000.jjtSetValue(t.image);} (("[" Index() "]")|["." <SIZE>])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Rhs() : {/*@bgen(jjtree) Rhs */
              ASTRhs jjtn000 = new ASTRhs(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Rhs */
    try {
/*@egen*/
    (Term() [(t=<ARITH_OP>| t=<BITWISE_OP> | t=<ADDSUB_OP>){jjtn000.jjtSetValue(t.image);}  Term()]) | "[" ArraySize(){((SimpleNode)jjtn000).jjtSetArrayType();} "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArraySize() : {/*@bgen(jjtree) ArraySize */
  ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArraySize */
    try {
/*@egen*/
    ScalarAccess() | <INTEGER>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Term() : {/*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2,t3,t4;}
{/*@bgen(jjtree) Term */
    try {
/*@egen*/
    [t1=<ADDSUB_OP>{jjtn000.jjtSetSecValue(t1.image);}] (t2=<INTEGER>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/{jjtn000.jjtSetValue(t2.image);jjtn000.jjtSetIntType();} | LOOKAHEAD(3) Call() | (t3=<ID>{jjtn000.jjtSetValue(t3.image);jjtn000.jjtSetAssignId(t3.image);} (("[" Index() "]")|(["." t4=<SIZE>{jjtn000.jjtSetValue(t4.image);}]))))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Exprtest() : {/*@bgen(jjtree) Exprtest */
  ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exprtest */
    try {
/*@egen*/
    try{
        <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN EXPRTEST " + e.toString());
        incErrorCounter();
        int[] kinds = {RPAR};
        error_skipto(kinds);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
    try {
/*@egen*/
    <WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>

    try{
        [<ELSE> <LCHAVETA> Stmtlst() <RCHAVETA>]
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN ELSE " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Call() : {/*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
    try {
/*@egen*/
    t1=<ID>{jjtn000.jjtSetValue(t1.image);jjtn000.jjtSetAssignId(t1.image);} ["." t2=<ID>{jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetAssignId(t2.image);jjtn000.setAssignIdModule(t1.image);}] <LPAR>

    try{
        [ArgumentList()] <RPAR>
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN CALL " + e.toString());
        incErrorCounter();
        int[] kinds = {RCHAVETA, LCHAVETA, RPAR};
        int ret = error_skipto(kinds);
        if(ret == LCHAVETA){
            SpecialStmtlst();
        }
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Callstmt()       : {/*@bgen(jjtree) Call */
                         ASTCall jjtn000 = new ASTCall(JJTCALL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
    try {
/*@egen*/
    // t1=<ID>{jjtThis.jjtSetValue(t1.image);} ["." t2=<ID>{jjtThis.jjtSetSecValue(t2.image);}] <LPAR>
    t1=<ID>{jjtn000.jjtSetValue(t1.image);jjtn000.jjtSetAssignId(t1.image);} ["." t2=<ID>{jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetAssignId(t2.image);jjtn000.setAssignIdModule(t1.image);}] <LPAR>

    try{
        [ArgumentList()] <RPAR> <PVIRG>
    }
    catch (ParseException e) {
        System.out.println("EXCEPTION IN CALL " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG, RCHAVETA, LCHAVETA};
        int ret = error_skipto(kinds);
        if(ret == LCHAVETA){
            SpecialStmtlst();
        }
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    ( t=<ID>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{jjtn000.jjtSetValue(t.image);jjtn000.addAssignFunctionParameter(t.image,null);} | t=<STRING>/*@bgen(jjtree)*/
                                                                                                         {
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                         }
/*@egen*/{jjtn000.jjtSetValue(t.image);jjtn000.addAssignFunctionParameter(null,SimpleNode.Type.STRING);} | t=<INTEGER>/*@bgen(jjtree)*/
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                        jjtc000 = false;
                                                                                                                                                                                                                      }
/*@egen*/{jjtn000.jjtSetValue(t.image); jjtn000.addAssignFunctionParameter(null,SimpleNode.Type.INT);})/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayAccess() : {/*@bgen(jjtree) ArrayAccess */
                      ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayAccess */
    try {
/*@egen*/
    t=<ID>{jjtn000.jjtSetValue(t.image);} "[" Index() "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ScalarAccess() : {/*@bgen(jjtree) ScalarAccess */
                       ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, t1;}
{/*@bgen(jjtree) ScalarAccess */
    try {
/*@egen*/
    t=<ID>{jjtn000.jjtSetValue(t.image);} ["." t1=<SIZE>{jjtn000.jjtSetSecValue(t1.image);}]/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Index() : {/*@bgen(jjtree) Index */
                ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Index */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/{jjtn000.jjtSetValue(t.image);} | t=<INTEGER>/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JAVACODE
int error_skipto(int[] kinds)       {
    Token t;
    boolean exit = false;
    System.out.print("Tokens skipped: ");
    do {
        t = getNextToken();
        System.out.print(t + " ");
        for(int a : kinds){
            if((a == t.kind) | (t.kind == EOF))
                exit = true;
        }
    } while (!exit);
    System.out.print("\n\n");
    return t.kind;
}

JAVACODE
void incErrorCounter(){/*@bgen(jjtree) incErrorCounter */
 ASTincErrorCounter jjtn000 = new ASTincErrorCounter(JJTINCERRORCOUNTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    if(yal2jvm.error_counter++ == 10){
        System.out.println("Too many errors found!");
        System.exit(1);
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


JAVACODE
void generateJavaBytecodes(Node root, SymbolTable symbolTable) throws IOException {/*@bgen(jjtree) generateJavaBytecodes */
 ASTgenerateJavaBytecodes jjtn000 = new ASTgenerateJavaBytecodes(JJTGENERATEJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/

    String fileName = ((SimpleNode) root).jjtGetValue() + ".j";
    File jFile = new File(fileName);
    FileOutputStream jFileOS = new FileOutputStream(jFile);
    PrintWriter writer = new PrintWriter(jFileOS);

    moduleJavaBytecodes(root, writer, symbolTable);/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof IOException) {
     throw (IOException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

JAVACODE
void moduleJavaBytecodes(Node root, PrintWriter writer, SymbolTable symbolTable){/*@bgen(jjtree) moduleJavaBytecodes */
 ASTmoduleJavaBytecodes jjtn000 = new ASTmoduleJavaBytecodes(JJTMODULEJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/

    writer.println(".class public " + ((SimpleNode) root).jjtGetValue());
    writer.println(".super java/lang/Object");

    int numChildren = root.jjtGetNumChildren();

    for(int i = 0; i < numChildren; i++) {

        SimpleNode node = (SimpleNode) root.jjtGetChild(i);

        int nodeType = node.getId();

        switch (nodeType) {
            case JJTFUNCTION:

            functionJavaBytecodes(node, writer, symbolTable);


            default:
            break;

        }
    }   
    clinitJavaBytecodes(writer);

    writer.close();/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/

}

JAVACODE
public void functionJavaBytecodes(SimpleNode functionNode, PrintWriter writer, SymbolTable symbolTable){/*@bgen(jjtree) functionJavaBytecodes */
 ASTfunctionJavaBytecodes jjtn000 = new ASTfunctionJavaBytecodes(JJTFUNCTIONJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/


    // locals n\u00ba de argumentos da funcao + declara\u00e7oes locais
    // stack n\u00ba max entre 2, n\u00ba de args das fucntions Calls

    String functionName = (String) functionNode.jjtGetValue();
    ArrayList<SimpleNode.Type> argumentTypes = new ArrayList();

    writer.print("\n.method public static ");

    Node statementList = functionNode.jjtGetChild(0);
    Node argumentList;

    // Locals stack
    // calculateLimitLocals(function);
    // calculateLimitStack(function);
    int limitLocals = 10, limitStack = 10;

    ArrayList<String> register_variables = new ArrayList();
    for(int i=0; i<limitLocals; i++) register_variables.add(null);

    // Arguments
        if(functionNode.jjtGetNumChildren() == 2) {

            argumentList = statementList;
            statementList = functionNode.jjtGetChild(1);

            int numArguments = argumentList.jjtGetNumChildren();

            for(int i = 0; i < numArguments; i++) {

                SimpleNode argument = (SimpleNode) argumentList.jjtGetChild(i);

                String argumentName = (String)argument.jjtGetValue();
                register_variables.set(register_variables.indexOf(null), argumentName);

                SimpleNode.Type argumentDataType = argument.getDataType();
                argumentTypes.add(argumentDataType);
            }

        }

        SymbolTable.Signature sign = new SymbolTable.Signature(argumentTypes, functionName);
        writer.println(functionToBytecodes(symbolTable.functions.get(sign)));

        writer.println(".limit locals " + limitLocals);
        writer.println(".limit stack " + limitStack);

    // StmtList
        int numStatements = statementList.jjtGetNumChildren();
        for(int i = 0; i < numStatements; i++) {

            SimpleNode statement = (SimpleNode) statementList.jjtGetChild(i);

            statementJavaBytecodes(statement, writer, register_variables, symbolTable, sign);
        }

        switch(symbolTable.functions.get(sign).returnType){
            case INT:
            writer.print("i");
            break;
            case ARRAY_INT:
            writer.print("a");
            break;
            default:
            break;
        }
        writer.println("return");
        writer.println(".end method\n");/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
    }

    JAVACODE
    public void statementJavaBytecodes(SimpleNode statementNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign){/*@bgen(jjtree) statementJavaBytecodes */
     ASTstatementJavaBytecodes jjtn000 = new ASTstatementJavaBytecodes(JJTSTATEMENTJAVABYTECODES);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

        SimpleNode statementChild = (SimpleNode) statementNode.jjtGetChild(0);
        switch (statementChild.getId()) {
            case yal2jvmTreeConstants.JJTASSIGN:

            int register_index = register_variables.indexOf(null);
            register_variables.set(register_index, (String) ((SimpleNode) statementChild.jjtGetChild(0)).jjtGetValue());
            String lhsBytecode = "istore_" + register_index;

            SimpleNode rhsNode = (SimpleNode) statementChild.jjtGetChild(1);

            rhsJavaBytecodes(rhsNode, writer, register_variables, symbolTable, sign);

            writer.println(lhsBytecode);
            break;
            case yal2jvmTreeConstants.JJTCALL:
            SimpleNode callNode = (SimpleNode) statementNode.jjtGetChild(0);
            functionCallJavaBytecodes(callNode, writer, register_variables, symbolTable, sign);
            default:
            break;
        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
    }

    JAVACODE
    public void rhsJavaBytecodes(SimpleNode rhsNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign){/*@bgen(jjtree) rhsJavaBytecodes */
     ASTrhsJavaBytecodes jjtn000 = new ASTrhsJavaBytecodes(JJTRHSJAVABYTECODES);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/
        SimpleNode rhs1stChild = (SimpleNode) rhsNode.jjtGetChild(0);

        switch (rhs1stChild.getId()) {
            case yal2jvmTreeConstants.JJTTERM:

            termJavaBytecodes(rhs1stChild, writer, register_variables, symbolTable, sign);
            break;

            default:
        // ARRAY SIZE DEF
            break;
        }

        if(rhsNode.jjtGetNumChildren() == 2){

            SimpleNode term2 = (SimpleNode) rhsNode.jjtGetChild(1);
            termJavaBytecodes(term2, writer, register_variables, symbolTable, sign);

            switch ((String)rhsNode.jjtGetValue()) {
                case "*":
                writer.println("imul");
                break;
                case "/":
                writer.println("idiv");
                break;
                case "+":
                writer.println("iadd");
                break;
                case "-":
                writer.println("isub");
                break;
                case "<<":
                writer.println("ishl");
                break;
                case ">>":
                writer.println("ishr");
                break;
                case ">>>":
                writer.println("iushl");
                break;
                case "&":
                writer.println("iand");
                break;
                case "|":
                writer.println("ior");
                break;
                case "^":
                writer.println("ixor");
                break;
                default:
                break;
            }
        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
    }

    JAVACODE
    public void termJavaBytecodes(SimpleNode termNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign){/*@bgen(jjtree) termJavaBytecodes */
     ASTtermJavaBytecodes jjtn000 = new ASTtermJavaBytecodes(JJTTERMJAVABYTECODES);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

        if(termNode.jjtGetNumChildren() == 0){
            if(termNode.getDataType() == SimpleNode.Type.INT){

                if((Integer) termNode.jjtGetValue()>5)
                    writer.println("bipush " + (String) termNode.jjtGetValue());
                else
                    writer.println("iconst_" + (String) termNode.jjtGetValue());
            }
        else{ // ID
            int rIndex = register_variables.indexOf((String) termNode.jjtGetValue());
            writer.println("iload_" + rIndex);
        }
    }
    else{ //function call
        SimpleNode callNode = (SimpleNode) termNode.jjtGetChild(0);

        functionCallJavaBytecodes(callNode, writer, register_variables, symbolTable, sign);
    }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

JAVACODE
public void functionCallJavaBytecodes(SimpleNode callNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign){/*@bgen(jjtree) functionCallJavaBytecodes */
 ASTfunctionCallJavaBytecodes jjtn000 = new ASTfunctionCallJavaBytecodes(JJTFUNCTIONCALLJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/

    System.out.println("callNode.id: " + callNode.getId());

    String functionName = (String) callNode.getAssignId();
    String moduleName = (String) callNode.getAssignIdModule();
    if(moduleName == null) moduleName = symbolTable.moduleName;
    
    
    SimpleNode argsListNode = (SimpleNode) callNode.jjtGetChild(0);
    
    ArrayList<SimpleNode.Type> argumentTypes = new ArrayList();
    
    ArrayList<SymbolTable.Pair<String, SimpleNode.Type>> assignFunctionParameters = callNode.getAssignFunctionParameters();
    
    System.out.println("functionName: " + moduleName + "/" + functionName);
    for (int i = 0; i < argsListNode.jjtGetNumChildren(); i++) {
        SimpleNode argNode = (SimpleNode) argsListNode.jjtGetChild(i);

        String argName = assignFunctionParameters.get(i).key;
        if(argName != null){

            SimpleNode.Type type = symbolTable.globalDeclarations.get(argName);

            if(type == null){
                SymbolTable.Function function = symbolTable.functions.get(sign);
                System.out.println("argName: " + argName);
                type = function.localDeclarations.get(argName);
                System.out.println("Type: " + type);
            }
            argumentTypes.add(type);
            int rIndex = register_variables.indexOf((String) argNode.jjtGetValue());
            writer.println("iload_" + rIndex);
        }
        else{
            argumentTypes.add(assignFunctionParameters.get(i).value);
            writer.println(loadIntegerToBytecodes(Integer.parseInt((String)((SimpleNode)argNode).jjtGetValue())));
        }
    }

    for (SimpleNode.Type type : argumentTypes) {
        System.out.println("argType: " + type);
    }
    SymbolTable.Signature funcCallSign = new SymbolTable.Signature(argumentTypes, functionName);
    SymbolTable.Function function = symbolTable.functions.get(funcCallSign);
    if(function == null){
        System.out.println("NULL FUNCTION");
    } 
    else{

        writer.println("invokestatic " + moduleName + "/" + functionToBytecodes(function) + "\n");
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/

}

JAVACODE
String typeToBytecodes(SimpleNode.Type type) {/*@bgen(jjtree) typeToBytecodes */
 ASTtypeToBytecodes jjtn000 = new ASTtypeToBytecodes(JJTTYPETOBYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    switch (type) {
        case INT:
        return "I";
        case ARRAY_INT:
        return "[I";
        case VOID:
        return "V";
        case STRING:
        return "Ljava/lang/String;";
        default:
        return "";
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

JAVACODE
String functionToBytecodes(SymbolTable.Function function){/*@bgen(jjtree) functionToBytecodes */
 ASTfunctionToBytecodes jjtn000 = new ASTfunctionToBytecodes(JJTFUNCTIONTOBYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    String result = function.signature.functionName + "(";

    if (function.signature.functionName.equals("main")) result +=  "[Ljava/lang/String;";
    else{
        ArrayList<SimpleNode.Type> argumentTypes = function.signature.argumentTypes;
        for (SimpleNode.Type type : argumentTypes) {
            result += typeToBytecodes(type);
        }
    }

    result += ")";

    // Return type
    result += typeToBytecodes(function.returnType);

    return result;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

JAVACODE 
String loadIntegerToBytecodes(Integer value){/*@bgen(jjtree) loadIntegerToBytecodes */
 ASTloadIntegerToBytecodes jjtn000 = new ASTloadIntegerToBytecodes(JJTLOADINTEGERTOBYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/

    if(value > 5) 
        return "bipush " + value;
    else 
        return "iconst_" + value;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/   
}

JAVACODE
void clinitJavaBytecodes(PrintWriter writer){/*@bgen(jjtree) clinitJavaBytecodes */
 ASTclinitJavaBytecodes jjtn000 = new ASTclinitJavaBytecodes(JJTCLINITJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    writer.println("method static public <clinit>()V");
    writer.println(".limit stack 0");
    writer.println(".limit locals 0");
    writer.println("return");
    writer.println(".end method ");/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/

}

JAVACODE
SymbolTable generateSymbolTable(Node root) {/*@bgen(jjtree) generateSymbolTable */
 ASTgenerateSymbolTable jjtn000 = new ASTgenerateSymbolTable(JJTGENERATESYMBOLTABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/

    SymbolTable symbolTable = new SymbolTable( (String)((SimpleNode) root).jjtGetValue());
    int numChildren = root.jjtGetNumChildren();

    ArrayList<SymbolTable.Function> allFunctions = new ArrayList();
    ArrayList<Node> allStatementsListNodes = new ArrayList();
    ArrayList<Node> allFunctionsNodes = new ArrayList();

    for(int i = 0; i < numChildren; i++) {

        SimpleNode node = (SimpleNode) root.jjtGetChild(i);
        int nodeType = node.getId();

        switch (nodeType) {
            case JJTDECLARATION:

            symbolTable.addGlobalDeclaration((String)node.jjtGetValue(),node.getDataType());
            break;

            case JJTFUNCTION:

            String functionName = (String) node.jjtGetValue();
            SimpleNode.Type returnType = node.getDataType();
            SymbolTable.Signature signature = new SymbolTable.Signature(functionName);
            SymbolTable.Function function = new SymbolTable.Function(signature,returnType);

                /**
                 * verificar se tem argumentos ou apenas statements
                 */

                Node argumentList;
                Node statementList;

                int functionChildrenNum = node.jjtGetNumChildren();
                statementList = node.jjtGetChild(0);

                // System.out.println("Function Name: " + signature.functionName);

                if(functionChildrenNum == 2) {

                    argumentList = statementList;
                    statementList = node.jjtGetChild(1);
                    updateSymbolTableFunctionArguments(argumentList, function);


                }

                allFunctions.add(function);
                allStatementsListNodes.add(statementList);
                allFunctionsNodes.add(node);

                //add function
                symbolTable.addFunction(function);

                break;

                default:
                break;
            }
        }

        for(int i = 0; i < allFunctions.size(); i++) {

            updateSymbolTableFunctionAssigns(allStatementsListNodes.get(i), allFunctions.get(i),symbolTable);
            updateSymbolTableFunctionFunctionCalls(allFunctionsNodes.get(i), allFunctions.get(i), symbolTable);

        }

        return symbolTable;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/


    }

    JAVACODE
    void updateSymbolTableFunctionArguments(Node argumentList, SymbolTable.Function function) {/*@bgen(jjtree) updateSymbolTableFunctionArguments */
     ASTupdateSymbolTableFunctionArguments jjtn000 = new ASTupdateSymbolTableFunctionArguments(JJTUPDATESYMBOLTABLEFUNCTIONARGUMENTS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

        int numArguments = argumentList.jjtGetNumChildren();

        for(int i = 0; i < numArguments; i++) {

            SimpleNode argument = (SimpleNode) argumentList.jjtGetChild(i);

        //apenas uma verifica\u00e7\u00e3o redundante se \u00e9 do tipo elemento
            if(argument.getId() != JJTELEMENT) {

                System.out.println("Argument not of ELEMENT type, check why.");
                continue;
            }

            String argumentName = (String)argument.jjtGetValue();
            SimpleNode.Type argumentDataType = argument.getDataType();
            function.signature.addArgumentType(argumentName,argumentDataType);

        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/

    }

    JAVACODE
    void updateSymbolTableFunctionAssigns(Node statementList, SymbolTable.Function function, SymbolTable symbolTable) {/*@bgen(jjtree) updateSymbolTableFunctionAssigns */
     ASTupdateSymbolTableFunctionAssigns jjtn000 = new ASTupdateSymbolTableFunctionAssigns(JJTUPDATESYMBOLTABLEFUNCTIONASSIGNS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

        for(int i = 0; i < statementList.jjtGetNumChildren(); i++){

            SimpleNode statement = (SimpleNode)statementList.jjtGetChild(i);

            SimpleNode statementChild = (SimpleNode)statement.jjtGetChild(0);

            switch(statementChild.getId()){
                case JJTASSIGN:
                SimpleNode lhs = (SimpleNode)statementChild.jjtGetChild(0);
                SimpleNode rhs = (SimpleNode)statementChild.jjtGetChild(1);
                SimpleNode rhsChild = (SimpleNode)rhs.jjtGetChild(0);
                String rhsValue = (String)rhs.jjtGetValue();
                SimpleNode.Type rhsType = rhs.getDataType();

                if(rhsChild.jjtGetNumChildren() > 0){ //so entra neste if se for uma function call
                    //quando n\u00e3o tem module -> first value = nome da funcao
                    //quanto tem module -> first value = nome do module
                    SimpleNode callNode = (SimpleNode)rhsChild.jjtGetChild(0);
                    String functionName = (String)callNode.jjtGetValue();
                    String module = null;
                    if(callNode.jjtGetSecValue() != null){
                        functionName = (String)callNode.jjtGetSecValue();
                        module = (String)callNode.jjtGetValue();
                    }

                    //vai buscar a functioncall e tira-lhe o Type para depois comparar com o do lhs
                    SymbolTable.FunctionCall fcall = symbolTable.checkGoodFunctionCall(functionName,module,callNode.assignFunctionParameters,function);
                    rhsType = fcall.funcionCallReturnType;

                }
                else { //entra neste else se for ID ou um inteiro
                    if(statementChild.getAssignId() != null)
                        rhsType = symbolTable.getType(statementChild.getAssignId(),function);

                    if(rhsValue == null)
                        rhsValue = (String)rhsChild.jjtGetValue();

                    if(rhsType == null)
                        rhsType = rhsChild.getDataType();

                }

                // verificar se os types dos 2 membros do assign coincidem
                if(lhs.getDataType() == null)
                    lhs.jjtSetType(rhsType);
                else{
                    if(lhs.getDataType() != rhsType){
                        System.out.println("Semantic error: conflict types between " + lhs.value + " and " + rhsValue);
                    }
                }
                //verificar se est\u00e1 em alguma das tabelas (local ou global)
                function.addLocalDeclaration((String)lhs.value, lhs.getDataType(), symbolTable.globalDeclarations);
                break;

                case JJTIF:
                    for(int x = 1; x < statementChild.jjtGetNumChildren(); x++){
                        SimpleNode statementListIfWhile = (SimpleNode) statementChild.jjtGetChild(x);
                        updateSymbolTableFunctionAssigns(statementListIfWhile, function, symbolTable);
                    System.out.println("X = " + x);
                    }
                    break;
                case JJTWHILE:
                    SimpleNode statementListIfWhile = (SimpleNode) statementChild.jjtGetChild(1);
                    updateSymbolTableFunctionAssigns(statementListIfWhile, function, symbolTable);
                break;

                default:
                break;
            }
        }
        System.out.println();/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
    }


    JAVACODE
    void updateSymbolTableFunctionFunctionCalls(Node node, SymbolTable.Function function, SymbolTable symbolTable) {/*@bgen(jjtree) updateSymbolTableFunctionFunctionCalls */
     ASTupdateSymbolTableFunctionFunctionCalls jjtn000 = new ASTupdateSymbolTableFunctionFunctionCalls(JJTUPDATESYMBOLTABLEFUNCTIONFUNCTIONCALLS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

        SimpleNode currentNode = (SimpleNode) node;

        if(currentNode.getId() == JJTCALL) {

            String functionName = (String)currentNode.jjtGetValue();
            String moduleName = null;

            if(currentNode.jjtGetSecValue() != null) {
                moduleName = functionName;
                functionName = (String) currentNode.jjtGetSecValue();
            }

            ArrayList<SymbolTable.Pair<String,SimpleNode.Type>> functionCallParameters = currentNode.assignFunctionParameters;

            SymbolTable.FunctionCall functionCall = symbolTable.checkGoodFunctionCall(functionName, moduleName, functionCallParameters, function);

            function.addFunctionCall(functionCall);

        }

        else {

            for(int i = 0; i < currentNode.jjtGetNumChildren(); i++) {

                updateSymbolTableFunctionFunctionCalls(currentNode.jjtGetChild(i),function, symbolTable);

            }



        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/



    }


    JAVACODE
    void updateNullTypesFunctionCalls(SymbolTable symbolTable) {/*@bgen(jjtree) updateNullTypesFunctionCalls */
     ASTupdateNullTypesFunctionCalls jjtn000 = new ASTupdateNullTypesFunctionCalls(JJTUPDATENULLTYPESFUNCTIONCALLS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

        HashMap<SymbolTable.Signature,SymbolTable.Function> functions = symbolTable.functions;

        for(SymbolTable.Signature signature: functions.keySet()) {

            SymbolTable.Function function = functions.get(signature);

            ArrayList<SymbolTable.Pair<String,SymbolTable.Signature>> nullDeclarationsFunctionCalls = function.nullDeclarationsFunctionCalls;

            for(SymbolTable.Pair<String,SymbolTable.Signature> nullDeclarationsFunctionCall : nullDeclarationsFunctionCalls) {

                SymbolTable.Signature functionCallSignature = nullDeclarationsFunctionCall.value;

                int argumentsSize = functionCallSignature.arguments.size();

                ArrayList<SimpleNode.Type> argumentTypesFunctionCall = new ArrayList<SimpleNode.Type>(argumentsSize);

                for(int i = 0; i < argumentsSize; i++) {

                    argumentTypesFunctionCall.add(SimpleNode.Type.INT);

                }

                for(int i = 0; i < argumentsSize; i++) {

                    if(functionCallSignature.argumentTypes.get(i) != null) {
                        argumentTypesFunctionCall.set(i, functionCallSignature.argumentTypes.get(i));
                    }
                    else {

                        String variable = functionCallSignature.arguments.get(i);

                        SimpleNode.Type type = symbolTable.globalDeclarations.get(variable);

                        if(type == null)
                            type = function.localDeclarations.get(variable);

                        argumentTypesFunctionCall.set(i, type);

                        if(type == null) {

                            System.out.println("Variable " + variable + " not initialized " + "in " + functionCallSignature.functionName + " call on function " + function.signature.functionName);
                            continue;
                        }

                    }

                }

                SymbolTable.Signature signatureFunctionCall = new SymbolTable.Signature(argumentTypesFunctionCall,functionCallSignature.functionName);

                SymbolTable.Function functionFunctionCall = symbolTable.functions.get(signatureFunctionCall);

                if(functionFunctionCall == null) {

                    System.out.print("Function " + signatureFunctionCall.functionName + "("); 

                    for(int i = 0; i < signatureFunctionCall.argumentTypes.size(); i++) {
                        System.out.print(signatureFunctionCall.argumentTypes.get(i));

                        if(i < signatureFunctionCall.argumentTypes.size()-1)
                            System.out.print(", ");

                    }

                    System.out.println(") does not exist");
                    continue;

                }

            //Ver se j\u00e1 era global e se o tipo \u00e9 o mesmo, se n\u00e3o for, meter nas repetidas, se ainda n\u00e3o tiver tipo, atribuir o do return
            //da fun\u00e7\u00e3o

                String nullFunctionCallAssignVariable = nullDeclarationsFunctionCall.key;
                SimpleNode.Type returnType = functionFunctionCall.returnType;

                if(symbolTable.globalDeclarations.containsKey(nullFunctionCallAssignVariable)) {

                    SimpleNode.Type currentType = symbolTable.globalDeclarations.get(nullFunctionCallAssignVariable);

                    symbolTable.addGlobalDeclaration(nullFunctionCallAssignVariable, returnType);
                    function.localDeclarations.remove(nullFunctionCallAssignVariable);

                }

                else {

                    SimpleNode.Type nullType = function.localDeclarations.get(nullFunctionCallAssignVariable);
                    function.localDeclarations.put(nullFunctionCallAssignVariable, returnType);

                }

            }

        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/

    }