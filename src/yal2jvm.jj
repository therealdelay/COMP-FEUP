/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal2jvm.jj */
/*@egen*/options{

	           
}

PARSER_BEGIN(yal2jvm)
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();

/*@egen*/
	public static int error_counter = 0;
	public static void main(String args[]) throws ParseException {
		InputStream f = null;

		try { 
			f = new FileInputStream("/home/delay/FEUP/comp-bit/g33/yal examples/" + args[0]);
		}catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
		}

		System.out.println("File: " + args[0]);

		yal2jvm parser = new yal2jvm(f);

		SimpleNode node = parser.Module();

		System.out.print("Error count: " + error_counter + "\n\n");
		
		System.out.println("AST:");
		node.dump("");
		System.out.print("\n\n\n");
	}
}

PARSER_END(yal2jvm)

SKIP : {
	" "
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
TOKEN : {
	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
	| <BITWISE_OP: "&" | "|" | "^">
	| <NOT_OP: "!">
	| <WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(">
	| <RPAR: ")">
	| <VIRG: ",">
	| <PVIRG: ";">
	| <LCHAVETA: "{">
	| <RCHAVETA: "}">
	| <FUNCTION: "function">
	| <MODULE: "module">
	| <SIZE: "size">
}

TOKEN : {
	<INTEGER: (<DIGIT>)+>
	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
	| <#DIGIT: ["0"-"9"]>
	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Module() : {/*@bgen(jjtree) Module */
                       ASTModule jjtn000 = new ASTModule(JJTMODULE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Module */
        try {
/*@egen*/
	try{
		<MODULE> t=<ID>{jjtn000.jjtSetValue(t.image);} <LCHAVETA> (Declaration())* (Function())* <RCHAVETA>
	}
	catch (ParseException e) {
			System.out.println("EXCEPTION IN MODULE " + e.toString());
			yal2jvm.error_counter++;
			int[] kinds = {RCHAVETA, EOF};
			error_skipto(kinds);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Declaration() : {/*@bgen(jjtree) Declaration */
                      ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} ["[" "]"] [<PVIRG>]
	[
		<ASSIGN>
		try{
			(("[" ArraySize() "]") | [<ADDSUB_OP>] <INTEGER>) <PVIRG>
		}
		catch (ParseException e) {
			System.out.println("EXCEPTION IN DECLARATION " + e.toString());
			yal2jvm.error_counter++;
			int[] kinds = {PVIRG};
			error_skipto(kinds);
		}
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Function() : {/*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Function */
        try {
/*@egen*/

	try{
		<FUNCTION> t=<ID>{jjtn000.jjtSetValue(t.image);}
	}
	catch (ParseException e) {
			System.out.println("EXCEPTION IN FUNCTION " + e.toString());
			yal2jvm.error_counter++;
			int[] kinds = {PVIRG, LCHAVETA, LPAR, ID};
			error_skipto(kinds);
	}

	try{
		[["[" "]"] <ASSIGN> <ID>] <LPAR> [Varlist()] <RPAR>
	}
	catch (ParseException e) {
			System.out.println("EXCEPTION IN FUNCTION " + e.toString());
			yal2jvm.error_counter++;
			int[] kinds = {RPAR};
			error_skipto(kinds);
	}
	<LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Varlist() : {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Varlist */
        try {
/*@egen*/
	(ArrayElement2()) ( <VIRG> ArrayElement2() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayElement() : {/*@bgen(jjtree) ArrayElement */
                       ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayElement */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} "[" "]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayElement2() : {/*@bgen(jjtree) ArrayElement2 */
                        ASTArrayElement2 jjtn000 = new ASTArrayElement2(JJTARRAYELEMENT2);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayElement2 */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} ["[" "]"]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarElement() : {/*@bgen(jjtree) ScalarElement */
                        ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ScalarElement */
        try {
/*@egen*/
	t=<ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmtlst() : {/*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmtlst */
        try {
/*@egen*/
	( Stmt() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void SpecialStmtlst()       : {}
{
	Stmtlst() <RCHAVETA>
} 

void Stmt() : {/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
        try {
/*@egen*/
	try{
		If() | While() | LOOKAHEAD(3) Assign() | Callstmt()
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN STMT " + e.toString());
		yal2jvm.error_counter++;
		int[] kinds = {RPAR, PVIRG, LCHAVETA};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Assign() : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
	Lhs() <ASSIGN>
	try{
		Rhs() <PVIRG>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN ASSIGN " + e.toString());
		yal2jvm.error_counter++;
		int[] kinds = {PVIRG};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lhs() : {/*@bgen(jjtree) Lhs */
              ASTLhs jjtn000 = new ASTLhs(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Lhs */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} (("[" Index() "]")|(["." <SIZE>]))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Rhs() : {/*@bgen(jjtree) Rhs */
  ASTRhs jjtn000 = new ASTRhs(JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rhs */
        try {
/*@egen*/
	(Term() [(<ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP>) Term()]) | "[" ArraySize() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArraySize() : {/*@bgen(jjtree) ArraySize */
  ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArraySize */
        try {
/*@egen*/
	ScalarAccess() | <INTEGER>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Term() : {/*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Term */
        try {
/*@egen*/
	[<ADDSUB_OP>] (<INTEGER> | LOOKAHEAD(3) Call() | (t=<ID>{jjtn000.jjtSetValue(t.image);} (("[" Index() "]")|(["." <SIZE>]))))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Exprtest() : {/*@bgen(jjtree) Exprtest */
  ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exprtest */
        try {
/*@egen*/
	try{
		<LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN EXPRTEST " + e.toString());
		yal2jvm.error_counter++;
		int[] kinds = {RPAR};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> 

	try{
		[<ELSE> <LCHAVETA> Stmtlst() <RCHAVETA>]
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN ELSE " + e.toString());
		yal2jvm.error_counter++;
		int[] kinds = {PVIRG};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Call() : {/*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
	t1=<ID>{jjtn000.jjtSetValue(t1.image);} ["." t2=<ID>{jjtn000.jjtSetSecValue(t2.image);}] <LPAR>	

	try{
		[ArgumentList()] <RPAR>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN CALL " + e.toString());
		yal2jvm.error_counter++;
		int[] kinds = {RCHAVETA, LCHAVETA, RPAR};
		int ret = error_skipto(kinds);
		if(ret == LCHAVETA){
			SpecialStmtlst();
		}
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Callstmt()       : {/*@bgen(jjtree) Call */
                         ASTCall jjtn000 = new ASTCall(JJTCALL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
	t1=<ID>{jjtn000.jjtSetValue(t1.image);} ["." t2=<ID>{jjtn000.jjtSetSecValue(t2.image);}] <LPAR>	

	try{
		[ArgumentList()] <RPAR> <PVIRG>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN CALL " + e.toString());
		yal2jvm.error_counter++;
		int[] kinds = {PVIRG, RCHAVETA, LCHAVETA};
		int ret = error_skipto(kinds);
		if(ret == LCHAVETA){
			SpecialStmtlst();
		}
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
        try {
/*@egen*/
	Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
	( t=<ID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.jjtSetValue(t.image);} | t=<STRING>/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/{jjtn000.jjtSetValue(t.image);} | t=<INTEGER>/*@bgen(jjtree)*/
                                                                                                         {
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                         }
/*@egen*/{jjtn000.jjtSetValue(t.image);} )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAccess() : {/*@bgen(jjtree) ArrayAccess */
                      ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayAccess */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} "[" Index() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarAccess() : {/*@bgen(jjtree) ScalarAccess */
                       ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, t1;}
{/*@bgen(jjtree) ScalarAccess */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} ["." t1=<SIZE>{jjtn000.jjtSetSecValue(t1.image);}]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Index() : {/*@bgen(jjtree) Index */
                ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Index */
        try {
/*@egen*/
	t=<ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.jjtSetValue(t.image);} | t=<INTEGER>/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

JAVACODE
int error_skipto(int[] kinds)       {
  Token t;
  boolean exit = false;
  System.out.print("Tokens skipped: ");
  do {
  	t = getNextToken();
  	System.out.print(t + " ");
  	for(int a : kinds){
  		if((a == t.kind) | (t.kind == EOF))
  			exit = true;
  	}
  } while (!exit);
  System.out.print("\n\n");
  return t.kind;
}