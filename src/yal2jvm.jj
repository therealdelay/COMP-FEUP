/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal2jvm.jj */
/*@egen*/options{

	           
}

PARSER_BEGIN(yal2jvm)



import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;

public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();

/*@egen*/
	public static int error_counter = 0;
	private static SimpleNode astRoot = null;
	public static void main(String args[]) throws ParseException {
		InputStream f = null;

		try {
			f = new FileInputStream("../yalExamples/" + args[0]);
		}catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
		}

		//System.out.println("File: " + args[0]);

		yal2jvm parser = new yal2jvm(f);

		astRoot = parser.Module();

		//System.out.print("Error count: " + error_counter + "\n\n");

		//System.out.println("AST:");
		//astRoot.dump("");

		// buildSymbolTable(astRoot);

		SymbolTable symbolTable = generateSymbolTable(astRoot);
		
		// System.out.println(symbolTable);
		
		updateNullTypesFunctionCalls(symbolTable);

		// System.out.println(symbolTable);

		System.out.print("\n\n\n");
	}
}

PARSER_END(yal2jvm)

SKIP : {
	" "
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
TOKEN : {
	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
	| <BITWISE_OP: "&" | "|" | "^">
	| <NOT_OP: "!">
	| <WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(">
	| <RPAR: ")">
	| <VIRG: ",">
	| <PVIRG: ";">
	| <LCHAVETA: "{">
	| <RCHAVETA: "}">
	| <FUNCTION: "function">
	| <MODULE: "module">
	| <SIZE: "size">
}

TOKEN : {
	<INTEGER: (<DIGIT>)+>
	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
	| <#DIGIT: ["0"-"9"]>
	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Module() : {/*@bgen(jjtree) Module */
                       ASTModule jjtn000 = new ASTModule(JJTMODULE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Module */
        try {
/*@egen*/
	try{
		<MODULE> t=<ID>{jjtn000.jjtSetValue(t.image);} <LCHAVETA> (LOOKAHEAD(3) Declaration())* (Function())* <RCHAVETA>
	}
	catch (ParseException e) {
			System.out.println("EXCEPTION IN MODULE " + e.toString());
			incErrorCounter();
			int[] kinds = {RCHAVETA, EOF};
			error_skipto(kinds);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Declaration() : {/*@bgen(jjtree) Declaration */
                      ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, t2;}{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/

	t=<ID>{jjtn000.jjtSetValue(t.image);} ["[" "]" {jjtn000.jjtSetArrayType();}]
	[
		<ASSIGN>
		try{
			(("[" ArraySize() "]") {jjtn000.jjtSetArrayType();} | [<ADDSUB_OP>] t2=<INTEGER>{jjtn000.jjtSetIntType();})
		}
		catch (ParseException e) {
			System.out.println("EXCEPTION IN DECLARATION " + e.toString());
			incErrorCounter();
			int[] kinds = {PVIRG};
			error_skipto(kinds);
		}
	]
	try{
		<PVIRG>
	}
	catch(ParseException e){
		System.out.println("EXCEPTION IN DECLARATION " + e.toString());
		incErrorCounter();
		int[] kinds = {PVIRG};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Function() : {/*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}{/*@bgen(jjtree) Function */
        try {
/*@egen*/

	try{
		<FUNCTION>{jjtn000.jjtSetType(SimpleNode.Type.VOID);} [LOOKAHEAD(2) t2=<ID>{jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetIntType();} ["[" "]"{jjtn000.jjtSetArrayType();}] <ASSIGN>] t1=<ID>{jjtn000.jjtSetValue(t1.image);}
	}
	catch (ParseException e) {
			System.out.println("EXCEPTION IN FUNCTION " + e.toString());
			incErrorCounter();
			int[] kinds = {PVIRG, LCHAVETA, LPAR, ID};
			error_skipto(kinds);
	}

	try{
		<LPAR> [Varlist()] <RPAR>
	}
	catch (ParseException e) {
			System.out.println("EXCEPTION IN FUNCTION " + e.toString());
			incErrorCounter();
			int[] kinds = {RPAR};
			error_skipto(kinds);
	}
	<LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Varlist() : {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Varlist */
        try {
/*@egen*/
	(Element()) ( <VIRG> Element() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayElement() : {/*@bgen(jjtree) ArrayElement */
                       ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayElement */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} "[" "]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Element() : {/*@bgen(jjtree) Element */
                  ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Element */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image); jjtn000.jjtSetIntType();} ["[" "]"{jjtn000.jjtSetArrayType();}]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarElement() : {/*@bgen(jjtree) ScalarElement */
                        ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ScalarElement */
        try {
/*@egen*/
	t=<ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmtlst() : {/*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmtlst */
        try {
/*@egen*/
	( Stmt() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SpecialStmtlst()       : {}
{
	Stmtlst() <RCHAVETA>
}

void Stmt() : {/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
        try {
/*@egen*/
	try{
		If() | While() | LOOKAHEAD(3) Assign() | Callstmt()
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN STMT " + e.toString());
		incErrorCounter();
		int[] kinds = {RPAR, PVIRG, LCHAVETA};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Assign() : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
	Lhs() <ASSIGN>
	try{
		Rhs() <PVIRG>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN ASSIGN " + e.toString());
		incErrorCounter();
		int[] kinds = {PVIRG};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lhs() : {/*@bgen(jjtree) Lhs */
              ASTLhs jjtn000 = new ASTLhs(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Lhs */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} (("[" Index() "]")|( LhsArraySize() ))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LhsArraySize() : {/*@bgen(jjtree) LhsArraySize */
  ASTLhsArraySize jjtn000 = new ASTLhsArraySize(JJTLHSARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LhsArraySize */
        try {
/*@egen*/
	["." <SIZE>]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Rhs() : {/*@bgen(jjtree) Rhs */
  ASTRhs jjtn000 = new ASTRhs(JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rhs */
        try {
/*@egen*/
	(Term() [(<ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP>) Term()]) | "[" ArraySize(){((SimpleNode)jjtn000).jjtSetArrayType();} "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArraySize() : {/*@bgen(jjtree) ArraySize */
  ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArraySize */
        try {
/*@egen*/
	ScalarAccess() | <INTEGER>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Term() : {/*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2,t3, t4;}
{/*@bgen(jjtree) Term */
try {
/*@egen*/
[t1=<ADDSUB_OP>{jjtn000.jjtSetValue(t1.image);}] (t2=<INTEGER>/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                              }
/*@egen*/{jjtn000.jjtSetValue(t2.image);jjtn000.jjtSetIntType();} | LOOKAHEAD(3) Call() | (t3=<ID>{jjtn000.jjtSetValue(t3.image);jjtn000.jjtSetAssignId(t3.image);} (("[" Index() "]")|(["." t4=<SIZE>{jjtn000.jjtSetValue(t4.image);}]))))/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Exprtest() : {/*@bgen(jjtree) Exprtest */
  ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exprtest */
        try {
/*@egen*/
	try{
		<LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN EXPRTEST " + e.toString());
		incErrorCounter();
		int[] kinds = {RPAR};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>

	try{
		[<ELSE> <LCHAVETA> Stmtlst() <RCHAVETA>]
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN ELSE " + e.toString());
		incErrorCounter();
		int[] kinds = {PVIRG};
		error_skipto(kinds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Call() : {/*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
	t1=<ID>{jjtn000.jjtSetValue(t1.image);jjtn000.jjtSetAssignId(t1.image);} ["." t2=<ID>{jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetAssignId(t2.image);jjtn000.setAssignIdModule(t1.image);}] <LPAR>

	try{
		[ArgumentList()] <RPAR>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN CALL " + e.toString());
		incErrorCounter();
		int[] kinds = {RCHAVETA, LCHAVETA, RPAR};
		int ret = error_skipto(kinds);
		if(ret == LCHAVETA){
			SpecialStmtlst();
		}
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Callstmt()       : {/*@bgen(jjtree) Call */
                         ASTCall jjtn000 = new ASTCall(JJTCALL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
	t1=<ID>{jjtn000.jjtSetValue(t1.image);} ["." t2=<ID>{jjtn000.jjtSetSecValue(t2.image);}] <LPAR>

	try{
		[ArgumentList()] <RPAR> <PVIRG>
	}
	catch (ParseException e) {
		System.out.println("EXCEPTION IN CALL " + e.toString());
		incErrorCounter();
		int[] kinds = {PVIRG, RCHAVETA, LCHAVETA};
		int ret = error_skipto(kinds);
		if(ret == LCHAVETA){
			SpecialStmtlst();
		}
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
        try {
/*@egen*/
	Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
	( t=<ID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.jjtSetValue(t.image);jjtn000.addAssignFunctionParameter(t.image,null);} | t=<STRING>/*@bgen(jjtree)*/
                                                                                                             {
                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                               jjtc000 = false;
                                                                                                             }
/*@egen*/{jjtn000.jjtSetValue(t.image);jjtn000.addAssignFunctionParameter(null,SimpleNode.Type.STRING);} | t=<INTEGER>/*@bgen(jjtree)*/
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                            jjtc000 = false;
                                                                                                                                                                                                                          }
/*@egen*/{jjtn000.jjtSetValue(t.image); jjtn000.addAssignFunctionParameter(null,SimpleNode.Type.INT);})/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAccess() : {/*@bgen(jjtree) ArrayAccess */
                      ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayAccess */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} "[" Index() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarAccess() : {/*@bgen(jjtree) ScalarAccess */
                       ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, t1;}
{/*@bgen(jjtree) ScalarAccess */
        try {
/*@egen*/
	t=<ID>{jjtn000.jjtSetValue(t.image);} ["." t1=<SIZE>{jjtn000.jjtSetSecValue(t1.image);}]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Index() : {/*@bgen(jjtree) Index */
                ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Index */
        try {
/*@egen*/
	t=<ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.jjtSetValue(t.image);} | t=<INTEGER>/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

JAVACODE
int error_skipto(int[] kinds)       {
  Token t;
  boolean exit = false;
  System.out.print("Tokens skipped: ");
  do {
  	t = getNextToken();
  	System.out.print(t + " ");
  	for(int a : kinds){
  		if((a == t.kind) | (t.kind == EOF))
  			exit = true;
  	}
  } while (!exit);
  System.out.print("\n\n");
  return t.kind;
}

JAVACODE
void incErrorCounter(){/*@bgen(jjtree) incErrorCounter */
     ASTincErrorCounter jjtn000 = new ASTincErrorCounter(JJTINCERRORCOUNTER);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/
	if(yal2jvm.error_counter++ == 10){
		System.out.println("Too many errors found!");
		System.exit(1);
	}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

JAVACODE
SymbolTable generateSymbolTable(Node root) {/*@bgen(jjtree) generateSymbolTable */
     ASTgenerateSymbolTable jjtn000 = new ASTgenerateSymbolTable(JJTGENERATESYMBOLTABLE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

	SymbolTable symbolTable = new SymbolTable( (String)((SimpleNode) root).jjtGetValue());
	int numChildren = root.jjtGetNumChildren();

	for(int i = 0; i < numChildren; i++) {

		SimpleNode node = (SimpleNode) root.jjtGetChild(i);
		int nodeType = node.getId();

		switch (nodeType) {
			case JJTDECLARATION:

				symbolTable.addGlobalDeclaration((String)node.jjtGetValue(),node.getDataType());

				break;

			case JJTFUNCTION:

				String functionName = (String) node.jjtGetValue();
				SimpleNode.Type returnType = node.getDataType();
				SymbolTable.Signature signature = new SymbolTable.Signature(functionName);
				SymbolTable.Function function = new SymbolTable.Function(signature,returnType);

				/**
				 * verificar se tem argumentos ou apenas statements
				 */

				Node argumentList;
				Node statementList;

				int functionChildrenNum = node.jjtGetNumChildren();
				statementList = node.jjtGetChild(0);

				// System.out.println("Function Name: " + signature.functionName);

				if(functionChildrenNum == 2) {

					argumentList = statementList;
					statementList = node.jjtGetChild(1);
					updateSymbolTableFunctionArguments(argumentList, function);


				}

				updateSymbolTableFunctionStatements(statementList,function,symbolTable);
				updateSymbolTableFunctionFunctionCalls(node, function);

				//add function
				symbolTable.addFunction(function);

				break;

			default:
				break;
		}
	}

	return symbolTable;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/


}

JAVACODE
void updateSymbolTableFunctionArguments(Node argumentList, SymbolTable.Function function) {/*@bgen(jjtree) updateSymbolTableFunctionArguments */
     ASTupdateSymbolTableFunctionArguments jjtn000 = new ASTupdateSymbolTableFunctionArguments(JJTUPDATESYMBOLTABLEFUNCTIONARGUMENTS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

	int numArguments = argumentList.jjtGetNumChildren();

	for(int i = 0; i < numArguments; i++) {

		SimpleNode argument = (SimpleNode) argumentList.jjtGetChild(i);

		//apenas uma verifica\u00e7\u00e3o redundante se \u00e9 do tipo elemento
		if(argument.getId() != JJTELEMENT) {

			System.out.println("Argument not of ELEMENT type, check why.");
			continue;
		}

		String argumentName = (String)argument.jjtGetValue();
		SimpleNode.Type argumentDataType = argument.getDataType();
		function.signature.addArgumentType(argumentName,argumentDataType);

	}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/

}

JAVACODE
void updateSymbolTableFunctionStatements(Node statementList, SymbolTable.Function function, SymbolTable symbolTable) {/*@bgen(jjtree) updateSymbolTableFunctionStatements */
     ASTupdateSymbolTableFunctionStatements jjtn000 = new ASTupdateSymbolTableFunctionStatements(JJTUPDATESYMBOLTABLEFUNCTIONSTATEMENTS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

	int numStatements = statementList.jjtGetNumChildren();

	for(int i = 0; i < numStatements; i++) {

		SimpleNode node = (SimpleNode) statementList.jjtGetChild(i).jjtGetChild(0);

		SimpleNode lhs = (SimpleNode)node.jjtGetChild(0);

		switch (node.getId()) {

			case JJTASSIGN:

				if(node.getDataType() != null) {

					function.addLocalDeclaration((String)lhs.jjtGetValue(),node.getDataType(),null,null);

				}
				else {

					if(node.getAssignId() != null) {

						String previousVariable = node.getAssignId();
						SimpleNode.Type type = function.localDeclarations.get(previousVariable);

						if(type == null)
							type = symbolTable.globalDeclarations.get(previousVariable);

						System.out.println("Variable:" + previousVariable);
						System.out.println("Type:" + type);

						String localVariable = null;
						SymbolTable.Signature signature = null;

						SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);

						if(((SimpleNode)rhs.jjtGetChild(0)).getId() == JJTTERM) {

							SimpleNode term = (SimpleNode) rhs.jjtGetChild(0);

							if(term.jjtGetNumChildren() > 0 && ((SimpleNode) term.jjtGetChild(0)).getId() == JJTCALL) {

								SimpleNode call = (SimpleNode) term.jjtGetChild(0);

								signature = new SymbolTable.Signature(call.getAssignId(),call.getAssignFunctionParameters());

							}

							else
								localVariable = (String) term.jjtGetValue();


						}

						function.addLocalDeclaration((String)lhs.jjtGetValue(),type, localVariable, signature);

					}

				}

				break;

			case JJTWHILE:
			case JJTIF:

				SimpleNode statementListIfWhile = (SimpleNode) node.jjtGetChild(1);
				updateSymbolTableFunctionStatements(statementListIfWhile, function, symbolTable);

				break;

			default:

				break;
		}

	}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}



JAVACODE
void updateSymbolTableFunctionFunctionCalls(Node node, SymbolTable.Function function) {/*@bgen(jjtree) updateSymbolTableFunctionFunctionCalls */
     ASTupdateSymbolTableFunctionFunctionCalls jjtn000 = new ASTupdateSymbolTableFunctionFunctionCalls(JJTUPDATESYMBOLTABLEFUNCTIONFUNCTIONCALLS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

	SimpleNode currentNode = (SimpleNode) node;

	if(currentNode.getId() == JJTCALL) {

		System.out.println("Entrei no call");

		String functionName = (String)currentNode.jjtGetValue();
		String moduleName = "";

		if(currentNode.jjtGetSecValue() != null) {
			moduleName = functionName;
			functionName = (String) currentNode.jjtGetSecValue();
		}

		String leftVariable = null;
		SimpleNode parent = (SimpleNode) currentNode.jjtGetParent();
		if(parent.getId() == JJTTERM) {

			SimpleNode greatGrandParent = (SimpleNode) parent.jjtGetParent();
			SimpleNode lhs = (SimpleNode)greatGrandParent.jjtGetChild(0);
			leftVariable = (String)lhs.jjtGetValue();
	
		}

		function.addFunctionCall(new SymbolTable.Signature(functionName, currentNode.assignFunctionParameters),moduleName);

	}

	else {

		for(int i = 0; i < currentNode.jjtGetNumChildren(); i++) {

			updateSymbolTableFunctionFunctionCalls(currentNode.jjtGetChild(i),function);

		}



	}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/



}


JAVACODE
void updateNullTypesFunctionCalls(SymbolTable symbolTable) {/*@bgen(jjtree) updateNullTypesFunctionCalls */
     ASTupdateNullTypesFunctionCalls jjtn000 = new ASTupdateNullTypesFunctionCalls(JJTUPDATENULLTYPESFUNCTIONCALLS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

	HashMap<SymbolTable.Signature,SymbolTable.Function> functions = symbolTable.functions;

	for(SymbolTable.Signature signature: functions.keySet()) {

		SymbolTable.Function function = functions.get(signature);

		ArrayList<SymbolTable.Pair<String,SymbolTable.Signature>> nullDeclarationsFunctionCalls = function.nullDeclarationsFunctionCalls;

		for(SymbolTable.Pair<String,SymbolTable.Signature> nullDeclarationsFunctionCall : nullDeclarationsFunctionCalls) {
			
			SymbolTable.Signature functionCallSignature = nullDeclarationsFunctionCall.value;

			int argumentsSize = functionCallSignature.arguments.size();

			System.out.println("Argument Types size:" + argumentsSize);

			ArrayList<SimpleNode.Type> argumentTypesFunctionCall = new ArrayList<SimpleNode.Type>(argumentsSize);

			// for(int i = 0; i < argumentsSize; i++) {

			// 	if(functionCallSignature.argumentTypes.get(i) != null) {
			// 		argumentTypesFunctionCall.add(i, functionCallSignature.argumentTypes.get(i));
			// 		System.out.println("Argument type: " + argumentTypesFunctionCall.get(i));
			// 	}



			// }

			// SimpleNode.Type nullType = function.localDeclarations.get(nullDeclarationsFunctionCall.key);
			// SymbolTable.Signature signatureFunctionCall = nullDeclarationsFunctionCall.value;

			
			// SymbolTable.Function functionFunctionCall = symbolTable.functions.get(signatureFunctionCall);

			// System.out.println("FUNCTION NAME: " + functionFunctionCall.signature.functionName);


			// nullType = functionReturnType;

		}

	}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/

}