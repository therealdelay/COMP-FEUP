PARSER_BEGIN(yal2jvm)
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

public class yal2jvm {
	public static int error_counter = 0;
	public static void main(String args[]) throws ParseException {
		InputStream f = null;

		try { 
			f = new FileInputStream("/home/delay/FEUP/comp-bit/g33/yal examples/MyFirstYalExamples/array1.yal");
		}catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
		}

		yal2jvm parser = new yal2jvm(f);

		parser.Module();

		System.out.println("Error count: " + error_counter);
	}
}

PARSER_END(yal2jvm)

SKIP : {
	" "
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
TOKEN : {
	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
	| <BITWISE_OP: "&" | "|" | "^">
	| <NOT_OP: "!">
	| <WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(">
	| <RPAR: ")">
	| <VIRG: ",">
	| <PVIRG: ";">
	| <LCHAVETA: "{">
	| <RCHAVETA: "}">
	| <FUNCTION: "function">
	| <MODULE: "module">
	| <SIZE: "size">
}

TOKEN : {
	<INTEGER: (<DIGIT>)+>
	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
	| <#DIGIT: ["0"-"9"]>
	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

void Module() : {}{
	<MODULE> <ID> <LCHAVETA> (Declaration())* (Function())* <RCHAVETA>
}

void Declaration() : {}{
	<ID> ("[" "]")? ( <ASSIGN> ( ( "[" ArraySize() "]" ) | (<ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
}

void Function() : {}{
	<FUNCTION> <ID> (((("[" Index() "]")|(( "." <SIZE> )?)) <ASSIGN> <ID> <LPAR> (Varlist())? <RPAR> ) | (<LPAR> (Varlist())? <RPAR> ))
	<LCHAVETA> Stmtlst() <RCHAVETA>
}


void Varlist() : {}{
	(ArrayElement2()) ( <VIRG> ArrayElement2() )*
}

void ArrayElement() : {}
{
	<ID> "[" "]"
}

void ArrayElement2() : {}
{
	<ID> ("[" "]")?	
}

void ScalarElement() : {}
{
	<ID> 
}

void Stmtlst() : {}
{
	( Stmt() )*
} 

void Stmt() : {}
{
	If() | While() | LOOKAHEAD(3) Assign() | Call() <PVIRG>
}

void Assign() : {}
{
	Lhs() <ASSIGN> Rhs() <PVIRG>
}

void Lhs() : {}
{
	<ID> (("[" Index() "]")|(( "." <SIZE> )?))
}

void Rhs() : {}
{
	(Term() ((<ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP>) Term())?) | "[" ArraySize() "]"

}

void ArraySize() : {}
{
	ScalarAccess() | <INTEGER>
}

void Term() : {}
{
	(<ADDSUB_OP>)? (<INTEGER> | LOOKAHEAD(3) Call() | (<ID> (("[" Index() "]")|(( "." <SIZE> )?))))
}

void Exprtest() : {}
{
	<LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
}

void While() : {}
{
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}

void If() : {}
{
	<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA>	Stmtlst() <RCHAVETA> )?
}

void Call() : {}
{
	<ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
}

void ArgumentList() : {}
{
	Argument() ( <VIRG> Argument() )*
}

void Argument() : {}
{
	( <ID> | <STRING> | <INTEGER> )
}

void ArrayAccess() : {}
{
	<ID> "[" Index() "]"
}

void ScalarAccess() : {}
{
	<ID> ( "." <SIZE> )?
}

void Index() : {}
{
	<ID> | <INTEGER>
}