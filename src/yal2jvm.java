/* Generated By:JJTree&JavaCC: Do not edit this line. yal2jvm.java */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.*;

public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants, yal2jvmConstants {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();public static int error_counter = 0;
    private static SimpleNode astRoot = null;
    public static void main(String args[]) throws ParseException, IOException {
        InputStream f = null;
        boolean showAst = false;
        boolean showSymbolTable = false;
        Scanner scanner = new Scanner(System.in);

        System.out.println("\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn");
        System.out.println("#########################################");
        System.out.println("# Yal Compiler Project 2018 - Group G33 #");
        System.out.println("#########################################");
        System.out.println("\u005cnInsert the path of the file to parse (from folder /yalExamples/):");
        System.out.print(">");
        // String fileName = scanner.nextLine();
                String fileName = "MyFirstYalExamples/aval1.yal";
                System.out.println("Your file is " + fileName);

        try {
            f = new FileInputStream("../yalExamples/" + fileName);
        }catch(FileNotFoundException e) {
            System.out.println(e.getMessage());
            return;
        }

        System.out.print("\u005cnWould you like to see the AST?(1-Yes;0-No)  ");
        int astInput = scanner.nextInt();
        if(astInput == 1)
            showAst = true;
        else if(astInput != 0){
            System.out.println("Error in option!");
            return;
        }

        System.out.print("\u005cnWould you like to see the Symbol Table?(1-Yes;0-No)  ");
        int symbolTableInput = scanner.nextInt();
        if(symbolTableInput == 1)
            showSymbolTable = true;
        else if(symbolTableInput != 0){
            System.out.println("Error in option!");
            return;
        }

        yal2jvm parser = new yal2jvm(f);
        astRoot = parser.Module();
        System.out.println("\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn\u005cn");
        System.out.println("File " + fileName + " parsed with " + error_counter + " syntactic errors\u005cn");

        if(showAst){
            System.out.println("AST:");
            astRoot.dump("");
        }

        SymbolTable symbolTable = generateSymbolTable(astRoot);
        if(showSymbolTable)
            System.out.println("Symbol Table:\u005cn" + symbolTable);

        // generateJavaBytecodes(astRoot, symbolTable);

        System.out.println();
    }

  static final public SimpleNode Module() throws ParseException {
                       /*@bgen(jjtree) Module */
                       ASTModule jjtn000 = new ASTModule(JJTMODULE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(MODULE);
        t = jj_consume_token(ID);
                        jjtn000.jjtSetValue(t.image);
        jj_consume_token(LCHAVETA);
        label_1:
        while (true) {
          if (jj_2_1(3)) {
            ;
          } else {
            break label_1;
          }
          Declaration();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCTION:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_2;
          }
          Function();
        }
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN MODULE " + e.toString());
        incErrorCounter();
        int[] kinds = {RCHAVETA, EOF};
        error_skipto(kinds);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Declaration() throws ParseException {
                      /*@bgen(jjtree) Declaration */
                      ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t, t2;
    try {
      t = jj_consume_token(ID);
           jjtn000.jjtSetValue(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        jj_consume_token(32);
                                                    jjtn000.jjtSetArrayType();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            jj_consume_token(31);
            ArraySize();
            jj_consume_token(32);
                                jjtn000.jjtSetArrayType();
            break;
          case ADDSUB_OP:
          case INTEGER:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADDSUB_OP:
              jj_consume_token(ADDSUB_OP);
              break;
            default:
              jj_la1[2] = jj_gen;
              ;
            }
            t2 = jj_consume_token(INTEGER);
                                                                                         jjtn000.jjtSetIntType();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        System.out.println("EXCEPTION IN DECLARATION " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      try {
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN DECLARATION " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Function() throws ParseException {
                   /*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      try {
        jj_consume_token(FUNCTION);
                   jjtn000.jjtSetType(SimpleNode.Type.VOID);
        if (jj_2_2(2)) {
          t2 = jj_consume_token(ID);
                                                                                    jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetIntType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            jj_consume_token(31);
            jj_consume_token(32);
                                                                                                                                                        jjtn000.jjtSetArrayType();
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          jj_consume_token(ASSIGN);
        } else {
          ;
        }
        t1 = jj_consume_token(ID);
                                                                                                                                                                                                       jjtn000.jjtSetValue(t1.image);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN FUNCTION " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG, LCHAVETA, LPAR, ID};
        error_skipto(kinds);
      }
      try {
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          Varlist();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN FUNCTION " + e.toString());
        incErrorCounter();
        int[] kinds = {RPAR};
        error_skipto(kinds);
      }
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Varlist() throws ParseException {
                  /*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Element();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(VIRG);
        Element();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArrayElement() throws ParseException {
                       /*@bgen(jjtree) ArrayElement */
                       ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
           jjtn000.jjtSetValue(t.image);
      jj_consume_token(31);
      jj_consume_token(32);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Element() throws ParseException {
                  /*@bgen(jjtree) Element */
                  ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
           jjtn000.jjtSetValue(t.image); jjtn000.jjtSetIntType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        jj_consume_token(32);
                                                                            jjtn000.jjtSetArrayType();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ScalarElement() throws ParseException {
                        /*@bgen(jjtree) ScalarElement */
                        ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.jjtSetValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Stmtlst() throws ParseException {
                  /*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case IF:
        case ID:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        Stmt();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void SpecialStmtlst() throws ParseException {
    Stmtlst();
    jj_consume_token(RCHAVETA);
  }

  static final public void Stmt() throws ParseException {
               /*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          If();
          break;
        case WHILE:
          While();
          break;
        default:
          jj_la1[10] = jj_gen;
          if (jj_2_3(3)) {
            Assign();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              Callstmt();
              break;
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN STMT " + e.toString());
        incErrorCounter();
        int[] kinds = {RPAR, PVIRG, LCHAVETA};
        error_skipto(kinds);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Assign() throws ParseException {
                 /*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Lhs();
      jj_consume_token(ASSIGN);
      try {
        Rhs();
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN ASSIGN " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Lhs() throws ParseException {
              /*@bgen(jjtree) Lhs */
              ASTLhs jjtn000 = new ASTLhs(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
           jjtn000.jjtSetValue(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        Index();
        jj_consume_token(32);
        break;
      default:
        jj_la1[13] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          jj_consume_token(33);
          jj_consume_token(SIZE);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Rhs() throws ParseException {
              /*@bgen(jjtree) Rhs */
              ASTRhs jjtn000 = new ASTRhs(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:
        Term();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARITH_OP:
            t = jj_consume_token(ARITH_OP);
            break;
          case BITWISE_OP:
            t = jj_consume_token(BITWISE_OP);
            break;
          case ADDSUB_OP:
            t = jj_consume_token(ADDSUB_OP);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                            jjtn000.jjtSetValue(t.image);
          Term();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case 31:
        jj_consume_token(31);
        ArraySize();
                                                                                                                       ((SimpleNode)jjtn000).jjtSetArrayType();
        jj_consume_token(32);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArraySize() throws ParseException {
                    /*@bgen(jjtree) ArraySize */
  ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ScalarAccess();
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Term() throws ParseException {
               /*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t1,t2,t3,t4;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        t1 = jj_consume_token(ADDSUB_OP);
                    jjtn000.jjtSetSecValue(t1.image);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t2 = jj_consume_token(INTEGER);
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                      jjtn000.jjtSetValue(t2.image);jjtn000.jjtSetIntType();
        break;
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_4(3)) {
          Call();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            t3 = jj_consume_token(ID);
                                                                                                                                                               jjtn000.jjtSetValue(t3.image);jjtn000.jjtSetAssignId(t3.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 31:
              jj_consume_token(31);
              Index();
              jj_consume_token(32);
              break;
            default:
              jj_la1[20] = jj_gen;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 33:
                jj_consume_token(33);
                t4 = jj_consume_token(SIZE);
                                                                                                                                                                                                                                                                   jjtn000.jjtSetValue(t4.image);
                break;
              default:
                jj_la1[19] = jj_gen;
                ;
              }
            }
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Exprtest() throws ParseException {
                   /*@bgen(jjtree) Exprtest */
  ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(LPAR);
        Lhs();
        jj_consume_token(RELA_OP);
        Rhs();
        jj_consume_token(RPAR);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN EXPRTEST " + e.toString());
        incErrorCounter();
        int[] kinds = {RPAR};
        error_skipto(kinds);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void While() throws ParseException {
                /*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void If() throws ParseException {
             /*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          jj_consume_token(LCHAVETA);
          Stmtlst();
          jj_consume_token(RCHAVETA);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN ELSE " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG};
        error_skipto(kinds);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Call() throws ParseException {
               /*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      t1 = jj_consume_token(ID);
            jjtn000.jjtSetValue(t1.image);jjtn000.jjtSetAssignId(t1.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        t2 = jj_consume_token(ID);
                                                                                          jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetAssignId(t2.image);jjtn000.setAssignIdModule(t1.image);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:
          ArgumentList();
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN CALL " + e.toString());
        incErrorCounter();
        int[] kinds = {RCHAVETA, LCHAVETA, RPAR};
        int ret = error_skipto(kinds);
        if(ret == LCHAVETA){
            SpecialStmtlst();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Callstmt() throws ParseException {
                         /*@bgen(jjtree) Call */
                         ASTCall jjtn000 = new ASTCall(JJTCALL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      // t1=<ID>{jjtThis.jjtSetValue(t1.image);} ["." t2=<ID>{jjtThis.jjtSetSecValue(t2.image);}] <LPAR>
          t1 = jj_consume_token(ID);
            jjtn000.jjtSetValue(t1.image);jjtn000.jjtSetAssignId(t1.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        t2 = jj_consume_token(ID);
                                                                                          jjtn000.jjtSetSecValue(t2.image);jjtn000.jjtSetAssignId(t2.image);jjtn000.setAssignIdModule(t1.image);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:
          ArgumentList();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
        System.out.println("EXCEPTION IN CALL " + e.toString());
        incErrorCounter();
        int[] kinds = {PVIRG, RCHAVETA, LCHAVETA};
        int ret = error_skipto(kinds);
        if(ret == LCHAVETA){
            SpecialStmtlst();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArgumentList() throws ParseException {
                       /*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        Argument();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Argument() throws ParseException {
                   /*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.jjtSetValue(t.image);jjtn000.addAssignFunctionParameter(t.image,null);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                          jjtn000.jjtSetValue(t.image);jjtn000.addAssignFunctionParameter(null,SimpleNode.Type.STRING);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                                                                                                                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                        jjtc000 = false;
                                                                                                                                                                                                                       jjtn000.jjtSetValue(t.image); jjtn000.addAssignFunctionParameter(null,SimpleNode.Type.INT);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArrayAccess() throws ParseException {
                      /*@bgen(jjtree) ArrayAccess */
                      ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
           jjtn000.jjtSetValue(t.image);
      jj_consume_token(31);
      Index();
      jj_consume_token(32);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ScalarAccess() throws ParseException {
                       /*@bgen(jjtree) ScalarAccess */
                       ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t, t1;
    try {
      t = jj_consume_token(ID);
           jjtn000.jjtSetValue(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        t1 = jj_consume_token(SIZE);
                                                         jjtn000.jjtSetSecValue(t1.image);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Index() throws ParseException {
                /*@bgen(jjtree) Index */
                ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.jjtSetValue(t.image);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                        jjtn000.jjtSetValue(t.image);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static int error_skipto(int[] kinds) throws ParseException {
    Token t;
    boolean exit = false;
    System.out.print("Tokens skipped: ");
    do {
        t = getNextToken();
        System.out.print(t + " ");
        for(int a : kinds){
            if((a == t.kind) | (t.kind == EOF))
                exit = true;
        }
    } while (!exit);
    System.out.print("\u005cn\u005cn");
    return t.kind;
  }

  static void incErrorCounter() throws ParseException {
                       /*@bgen(jjtree) incErrorCounter */
 ASTincErrorCounter jjtn000 = new ASTincErrorCounter(JJTINCERRORCOUNTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {if(yal2jvm.error_counter++ == 10){
        System.out.println("Too many errors found!");
        System.exit(1);
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static void generateJavaBytecodes(Node root, SymbolTable symbolTable) throws ParseException, IOException {
                                                                                   /*@bgen(jjtree) generateJavaBytecodes */
 ASTgenerateJavaBytecodes jjtn000 = new ASTgenerateJavaBytecodes(JJTGENERATEJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {String fileName = ((SimpleNode) root).jjtGetValue() + ".j";
    File jFile = new File(fileName);
    FileOutputStream jFileOS = new FileOutputStream(jFile);
    PrintWriter writer = new PrintWriter(jFileOS);

    moduleJavaBytecodes(root, writer, symbolTable);/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof IOException) {
     throw (IOException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static void moduleJavaBytecodes(Node root, PrintWriter writer, SymbolTable symbolTable) throws ParseException {
                                                                                 /*@bgen(jjtree) moduleJavaBytecodes */
 ASTmoduleJavaBytecodes jjtn000 = new ASTmoduleJavaBytecodes(JJTMODULEJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {writer.println(".class public " + ((SimpleNode) root).jjtGetValue());
    writer.println(".super java/lang/Object");

    int numChildren = root.jjtGetNumChildren();

    for(int i = 0; i < numChildren; i++) {

        SimpleNode node = (SimpleNode) root.jjtGetChild(i);

        int nodeType = node.getId();

        switch (nodeType) {
            case JJTFUNCTION:

            functionJavaBytecodes(node, writer, symbolTable);


            default:
            break;

        }
    }
    clinitJavaBytecodes(writer);

    writer.close();/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static public void functionJavaBytecodes(SimpleNode functionNode, PrintWriter writer, SymbolTable symbolTable) throws ParseException {
                                                                                                        /*@bgen(jjtree) functionJavaBytecodes */
 ASTfunctionJavaBytecodes jjtn000 = new ASTfunctionJavaBytecodes(JJTFUNCTIONJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {// locals nº de argumentos da funcao + declaraçoes locais
    // stack nº max entre 2, nº de args das fucntions Calls

    String functionName = (String) functionNode.jjtGetValue();
    ArrayList<SimpleNode.Type> argumentTypes = new ArrayList();

    writer.print("\u005cn.method public static ");

    Node statementList = functionNode.jjtGetChild(0);
    Node argumentList;

    // Locals stack
    // calculateLimitLocals(function);
    // calculateLimitStack(function);
    int limitLocals = 10, limitStack = 10;

    ArrayList<String> register_variables = new ArrayList();
    for(int i=0; i<limitLocals; i++) register_variables.add(null);

    // Arguments
        if(functionNode.jjtGetNumChildren() == 2) {

            argumentList = statementList;
            statementList = functionNode.jjtGetChild(1);

            int numArguments = argumentList.jjtGetNumChildren();

            for(int i = 0; i < numArguments; i++) {

                SimpleNode argument = (SimpleNode) argumentList.jjtGetChild(i);

                String argumentName = (String)argument.jjtGetValue();
                register_variables.set(register_variables.indexOf(null), argumentName);

                SimpleNode.Type argumentDataType = argument.getDataType();
                argumentTypes.add(argumentDataType);
            }

        }

        SymbolTable.Signature sign = new SymbolTable.Signature(argumentTypes, functionName);
        writer.println(functionToBytecodes(symbolTable.functions.get(sign)));

        writer.println(".limit locals " + limitLocals);
        writer.println(".limit stack " + limitStack);

    // StmtList
        int numStatements = statementList.jjtGetNumChildren();
        for(int i = 0; i < numStatements; i++) {

            SimpleNode statement = (SimpleNode) statementList.jjtGetChild(i);

            statementJavaBytecodes(statement, writer, register_variables, symbolTable, sign);
        }

        switch(symbolTable.functions.get(sign).returnType){
            case INT:
            writer.print("i");
            break;
            case ARRAY_INT:
            writer.print("a");
            break;
            default:
            break;
        }
        writer.println("return");
        writer.println(".end method\u005cn");/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static public void statementJavaBytecodes(SimpleNode statementNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign) throws ParseException {
                                                                                                                                                                                /*@bgen(jjtree) statementJavaBytecodes */
     ASTstatementJavaBytecodes jjtn000 = new ASTstatementJavaBytecodes(JJTSTATEMENTJAVABYTECODES);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {SimpleNode statementChild = (SimpleNode) statementNode.jjtGetChild(0);
        switch (statementChild.getId()) {
            case yal2jvmTreeConstants.JJTASSIGN:

            int register_index = register_variables.indexOf(null);
            register_variables.set(register_index, (String) ((SimpleNode) statementChild.jjtGetChild(0)).jjtGetValue());
            String lhsBytecode = "istore_" + register_index;

            SimpleNode rhsNode = (SimpleNode) statementChild.jjtGetChild(1);

            rhsJavaBytecodes(rhsNode, writer, register_variables, symbolTable, sign);

            writer.println(lhsBytecode);
            break;
            case yal2jvmTreeConstants.JJTCALL:
            SimpleNode callNode = (SimpleNode) statementNode.jjtGetChild(0);
            functionCallJavaBytecodes(callNode, writer, register_variables, symbolTable, sign);
            default:
            break;
        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static public void rhsJavaBytecodes(SimpleNode rhsNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign) throws ParseException {
                                                                                                                                                                    /*@bgen(jjtree) rhsJavaBytecodes */
     ASTrhsJavaBytecodes jjtn000 = new ASTrhsJavaBytecodes(JJTRHSJAVABYTECODES);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {SimpleNode rhs1stChild = (SimpleNode) rhsNode.jjtGetChild(0);

        switch (rhs1stChild.getId()) {
            case yal2jvmTreeConstants.JJTTERM:

            termJavaBytecodes(rhs1stChild, writer, register_variables, symbolTable, sign);
            break;

            default:
        // ARRAY SIZE DEF
            break;
        }

        if(rhsNode.jjtGetNumChildren() == 2){

            SimpleNode term2 = (SimpleNode) rhsNode.jjtGetChild(1);
            termJavaBytecodes(term2, writer, register_variables, symbolTable, sign);

            switch ((String)rhsNode.jjtGetValue()) {
                case "*":
                writer.println("imul");
                break;
                case "/":
                writer.println("idiv");
                break;
                case "+":
                writer.println("iadd");
                break;
                case "-":
                writer.println("isub");
                break;
                case "<<":
                writer.println("ishl");
                break;
                case ">>":
                writer.println("ishr");
                break;
                case ">>>":
                writer.println("iushl");
                break;
                case "&":
                writer.println("iand");
                break;
                case "|":
                writer.println("ior");
                break;
                case "^":
                writer.println("ixor");
                break;
                default:
                break;
            }
        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static public void termJavaBytecodes(SimpleNode termNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign) throws ParseException {
                                                                                                                                                                      /*@bgen(jjtree) termJavaBytecodes */
     ASTtermJavaBytecodes jjtn000 = new ASTtermJavaBytecodes(JJTTERMJAVABYTECODES);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {if(termNode.jjtGetNumChildren() == 0){
            if(termNode.getDataType() == SimpleNode.Type.INT){

                if((Integer) termNode.jjtGetValue()>5)
                    writer.println("bipush " + (String) termNode.jjtGetValue());
                else
                    writer.println("iconst_" + (String) termNode.jjtGetValue());
            }
        else{ // ID
            int rIndex = register_variables.indexOf((String) termNode.jjtGetValue());
            writer.println("iload_" + rIndex);
        }
    }
    else{ //function call
        SimpleNode callNode = (SimpleNode) termNode.jjtGetChild(0);

        functionCallJavaBytecodes(callNode, writer, register_variables, symbolTable, sign);
    }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static public void functionCallJavaBytecodes(SimpleNode callNode, PrintWriter writer, ArrayList<String> register_variables, SymbolTable symbolTable, SymbolTable.Signature sign) throws ParseException {
                                                                                                                                                                          /*@bgen(jjtree) functionCallJavaBytecodes */
 ASTfunctionCallJavaBytecodes jjtn000 = new ASTfunctionCallJavaBytecodes(JJTFUNCTIONCALLJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {System.out.println("callNode.id: " + callNode.getId());

    String functionName = (String) callNode.getAssignId();
    String moduleName = (String) callNode.getAssignIdModule();
    if(moduleName == null) moduleName = symbolTable.moduleName;


    SimpleNode argsListNode = (SimpleNode) callNode.jjtGetChild(0);

    ArrayList<SimpleNode.Type> argumentTypes = new ArrayList();

    ArrayList<SymbolTable.Pair<String, SimpleNode.Type>> assignFunctionParameters = callNode.getAssignFunctionParameters();

    System.out.println("functionName: " + moduleName + "/" + functionName);
    for (int i = 0; i < argsListNode.jjtGetNumChildren(); i++) {
        SimpleNode argNode = (SimpleNode) argsListNode.jjtGetChild(i);

        String argName = assignFunctionParameters.get(i).key;
        if(argName != null){

            SimpleNode.Type type = symbolTable.globalDeclarations.get(argName);

            if(type == null){
                SymbolTable.Function function = symbolTable.functions.get(sign);
                System.out.println("argName: " + argName);
                type = function.localDeclarations.get(argName);
                System.out.println("Type: " + type);
            }
            argumentTypes.add(type);
            int rIndex = register_variables.indexOf((String) argNode.jjtGetValue());
            writer.println("iload_" + rIndex);
        }
        else{
            argumentTypes.add(assignFunctionParameters.get(i).value);
            writer.println(loadIntegerToBytecodes(Integer.parseInt((String)((SimpleNode)argNode).jjtGetValue())));
        }
    }

    for (SimpleNode.Type type : argumentTypes) {
        System.out.println("argType: " + type);
    }
    SymbolTable.Signature funcCallSign = new SymbolTable.Signature(argumentTypes, functionName);
    SymbolTable.Function function = symbolTable.functions.get(funcCallSign);
    if(function == null){
        System.out.println("NULL FUNCTION");
    }
    else{

        writer.println("invokestatic " + moduleName + "/" + functionToBytecodes(function) + "\u005cn");
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static String typeToBytecodes(SimpleNode.Type type) throws ParseException {
                                              /*@bgen(jjtree) typeToBytecodes */
 ASTtypeToBytecodes jjtn000 = new ASTtypeToBytecodes(JJTTYPETOBYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {switch (type) {
        case INT:
        return "I";
        case ARRAY_INT:
        return "[I";
        case VOID:
        return "V";
        case STRING:
        return "Ljava/lang/String;";
        default:
        return "";
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static String functionToBytecodes(SymbolTable.Function function) throws ParseException {
                                                          /*@bgen(jjtree) functionToBytecodes */
 ASTfunctionToBytecodes jjtn000 = new ASTfunctionToBytecodes(JJTFUNCTIONTOBYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {String result = function.signature.functionName + "(";

    if (function.signature.functionName.equals("main")) result +=  "[Ljava/lang/String;";
    else{
        ArrayList<SimpleNode.Type> argumentTypes = function.signature.argumentTypes;
        for (SimpleNode.Type type : argumentTypes) {
            result += typeToBytecodes(type);
        }
    }

    result += ")";

    // Return type
    result += typeToBytecodes(function.returnType);

    return result;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static String loadIntegerToBytecodes(Integer value) throws ParseException {
                                             /*@bgen(jjtree) loadIntegerToBytecodes */
 ASTloadIntegerToBytecodes jjtn000 = new ASTloadIntegerToBytecodes(JJTLOADINTEGERTOBYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {if(value > 5)
        return "bipush " + value;
    else
        return "iconst_" + value;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static void clinitJavaBytecodes(PrintWriter writer) throws ParseException {
                                             /*@bgen(jjtree) clinitJavaBytecodes */
 ASTclinitJavaBytecodes jjtn000 = new ASTclinitJavaBytecodes(JJTCLINITJAVABYTECODES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {writer.println("method static public <clinit>()V");
    writer.println(".limit stack 0");
    writer.println(".limit locals 0");
    writer.println("return");
    writer.println(".end method ");/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static SymbolTable generateSymbolTable(Node root) throws ParseException {
                                            /*@bgen(jjtree) generateSymbolTable */
 ASTgenerateSymbolTable jjtn000 = new ASTgenerateSymbolTable(JJTGENERATESYMBOLTABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {SymbolTable symbolTable = new SymbolTable( (String)((SimpleNode) root).jjtGetValue());
    int numChildren = root.jjtGetNumChildren();

    ArrayList<SymbolTable.Function> allFunctions = new ArrayList();
    ArrayList<Node> allStatementsListNodes = new ArrayList();
    ArrayList<Node> allFunctionsNodes = new ArrayList();

    for(int i = 0; i < numChildren; i++) {

        SimpleNode node = (SimpleNode) root.jjtGetChild(i);
        int nodeType = node.getId();

        switch (nodeType) {
            case JJTDECLARATION:

            symbolTable.addGlobalDeclaration((String)node.jjtGetValue(),node.getDataType());
            break;

            case JJTFUNCTION:

            String functionName = (String) node.jjtGetValue();
            SimpleNode.Type returnType = node.getDataType();
            SymbolTable.Signature signature = new SymbolTable.Signature(functionName);
            SymbolTable.Function function = new SymbolTable.Function(signature,returnType);
            function.returnVariable = (String)node.jjtGetSecValue();

                /**
                 * verificar se tem argumentos ou apenas statements
                 */

                Node argumentList;
                Node statementList;

                int functionChildrenNum = node.jjtGetNumChildren();
                statementList = node.jjtGetChild(0);

                // System.out.println("Function Name: " + signature.functionName);

                if(functionChildrenNum == 2) {

                    argumentList = statementList;
                    statementList = node.jjtGetChild(1);
                    updateSymbolTableFunctionArguments(argumentList, function);


                }

                allFunctions.add(function);
                allStatementsListNodes.add(statementList);
                allFunctionsNodes.add(node);

                //add function
                symbolTable.addFunction(function);

                break;

                default:
                break;
            }
        }

        for(int i = 0; i < allFunctions.size(); i++) {

            updateSymbolTableFunctionAssigns(allStatementsListNodes.get(i), allFunctions.get(i),symbolTable);
            updateSymbolTableFunctionFunctionCalls(allFunctionsNodes.get(i), allFunctions.get(i), symbolTable);
            checkReturnVariable(allFunctions.get(i),symbolTable);
            checkArgsAreNotGlobals(allFunctions.get(i),symbolTable);

        }

        return symbolTable;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static void checkArgsAreNotGlobals(SymbolTable.Function function, SymbolTable symbolTable) throws ParseException {
                                                                                        /*@bgen(jjtree) checkArgsAreNotGlobals */
     ASTcheckArgsAreNotGlobals jjtn000 = new ASTcheckArgsAreNotGlobals(JJTCHECKARGSARENOTGLOBALS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {HashMap<String,SimpleNode.Type> globals = symbolTable.globalDeclarations;
        ArrayList<String> args = function.signature.arguments;

        for(String arg : args){
            if(globals.get(arg) != null){
                function.functionIsOk = false;
                if(function.argumentsError != null)
                    function.argumentsError += "Semantic Error: Argument " + arg + " is in conflict with global declaration " + arg + "!\u005cn";
                else
                    function.argumentsError = "Semantic Error: Argument " + arg + " is in conflict with global declaration " + arg + "!";
            }
        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static void checkReturnVariable(SymbolTable.Function function, SymbolTable symbolTable) throws ParseException {
                                                                                     /*@bgen(jjtree) checkReturnVariable */
     ASTcheckReturnVariable jjtn000 = new ASTcheckReturnVariable(JJTCHECKRETURNVARIABLE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {String retVariable = (String)function.returnVariable;
        HashMap<String,SimpleNode.Type> locals = function.localDeclarations;
        HashMap<String,SimpleNode.Type> globals = symbolTable.globalDeclarations;
        ArrayList<String> args = function.signature.arguments;

        if(function.returnVariable == null)
            return;

        if(locals.get(function.returnVariable) != null){
            return;
        }
        if(globals.get(function.returnVariable) != null){
            function.functionIsOk = false;
            function.returnVariableError = "Semantic Error: The return variable is a global declaration!";
            return;
        }
        else{
            for(String arg : args){
                if(arg == function.returnVariable){
                    return;
                }
            }
            function.functionIsOk = false;
            function.returnVariableError = "Semantic Error: The return variable does not exist in the function!";

        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static void updateSymbolTableFunctionArguments(Node argumentList, SymbolTable.Function function) throws ParseException {
                                                                                               /*@bgen(jjtree) updateSymbolTableFunctionArguments */
     ASTupdateSymbolTableFunctionArguments jjtn000 = new ASTupdateSymbolTableFunctionArguments(JJTUPDATESYMBOLTABLEFUNCTIONARGUMENTS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {int numArguments = argumentList.jjtGetNumChildren();

        for(int i = 0; i < numArguments; i++) {

            SimpleNode argument = (SimpleNode) argumentList.jjtGetChild(i);

        //apenas uma verificação redundante se é do tipo elemento
            if(argument.getId() != JJTELEMENT) {

                System.out.println("Argument not of ELEMENT type, check why.");
                continue;
            }

            String argumentName = (String)argument.jjtGetValue();
            SimpleNode.Type argumentDataType = argument.getDataType();
            function.signature.addArgumentType(argumentName,argumentDataType);

        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static void updateSymbolTableFunctionAssigns(Node statementList, SymbolTable.Function function, SymbolTable symbolTable) throws ParseException {
                                                                                                                       /*@bgen(jjtree) updateSymbolTableFunctionAssigns */
     ASTupdateSymbolTableFunctionAssigns jjtn000 = new ASTupdateSymbolTableFunctionAssigns(JJTUPDATESYMBOLTABLEFUNCTIONASSIGNS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {for(int i = 0; i < statementList.jjtGetNumChildren(); i++){

            SimpleNode statement = (SimpleNode)statementList.jjtGetChild(i);

            SimpleNode statementChild = (SimpleNode)statement.jjtGetChild(0);

            switch(statementChild.getId()){
                case JJTASSIGN:
                SimpleNode lhs = (SimpleNode)statementChild.jjtGetChild(0);
                SimpleNode rhs = (SimpleNode)statementChild.jjtGetChild(1);
                SimpleNode rhsChild = (SimpleNode)rhs.jjtGetChild(0);
                String rhsValue = (String)rhs.jjtGetValue();
                SimpleNode.Type rhsType = rhs.getDataType();

                if(rhsChild.jjtGetNumChildren() > 0){ //so entra neste if se for uma function call
                    //quando não tem module -> first value = nome da funcao
                    //quanto tem module -> first value = nome do module
                    SimpleNode callNode = (SimpleNode)rhsChild.jjtGetChild(0);
                    String functionName = (String)callNode.jjtGetValue();
                    String module = null;
                    if(callNode.jjtGetSecValue() != null){
                        functionName = (String)callNode.jjtGetSecValue();
                        module = (String)callNode.jjtGetValue();
                    }

                    //vai buscar a functioncall e tira-lhe o Type para depois comparar com o do lhs
                    SymbolTable.FunctionCall fcall = symbolTable.checkGoodFunctionCall(functionName,module,callNode.assignFunctionParameters,function);
                    rhsType = fcall.funcionCallReturnType;

                }
                else { //entra neste else se for ID ou um inteiro
                    if(statementChild.getAssignId() != null)
                        rhsType = symbolTable.getType(statementChild.getAssignId(),function);

                    if(rhsValue == null)
                        rhsValue = (String)rhsChild.jjtGetValue();

                    if(rhsType == null)
                        rhsType = rhsChild.getDataType();

                }

                // verificar se os types dos 2 membros do assign coincidem
                if(lhs.getDataType() == null)
                    lhs.jjtSetType(rhsType);
                else{
                    if(lhs.getDataType() != rhsType){
                        System.out.println("Semantic Error: conflict types between " + lhs.value + " and " + rhsValue);
                    }
                }
                //verificar se está em alguma das tabelas (local ou global)
                function.addLocalDeclaration((String)lhs.value, lhs.getDataType(), symbolTable.globalDeclarations);
                break;

                case JJTIF:
                    for(int x = 1; x < statementChild.jjtGetNumChildren(); x++){
                        SimpleNode statementListIfWhile = (SimpleNode) statementChild.jjtGetChild(x);
                        updateSymbolTableFunctionAssigns(statementListIfWhile, function, symbolTable);
                    }
                    break;
                case JJTWHILE:
                    SimpleNode statementListIfWhile = (SimpleNode) statementChild.jjtGetChild(1);
                    updateSymbolTableFunctionAssigns(statementListIfWhile, function, symbolTable);
                break;

                default:
                break;
            }
        }
        System.out.println();/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static void updateSymbolTableFunctionFunctionCalls(Node node, SymbolTable.Function function, SymbolTable symbolTable) throws ParseException {
                                                                                                                    /*@bgen(jjtree) updateSymbolTableFunctionFunctionCalls */
     ASTupdateSymbolTableFunctionFunctionCalls jjtn000 = new ASTupdateSymbolTableFunctionFunctionCalls(JJTUPDATESYMBOLTABLEFUNCTIONFUNCTIONCALLS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {SimpleNode currentNode = (SimpleNode) node;

        if(currentNode.getId() == JJTCALL) {

            String functionName = (String)currentNode.jjtGetValue();
            String moduleName = null;

            if(currentNode.jjtGetSecValue() != null) {
                moduleName = functionName;
                functionName = (String) currentNode.jjtGetSecValue();
            }

            ArrayList<SymbolTable.Pair<String,SimpleNode.Type>> functionCallParameters = currentNode.assignFunctionParameters;

            SymbolTable.FunctionCall functionCall = symbolTable.checkGoodFunctionCall(functionName, moduleName, functionCallParameters, function);

            function.addFunctionCall(functionCall);

        }

        else {

            for(int i = 0; i < currentNode.jjtGetNumChildren(); i++) {

                updateSymbolTableFunctionFunctionCalls(currentNode.jjtGetChild(i),function, symbolTable);

            }



        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static void updateNullTypesFunctionCalls(SymbolTable symbolTable) throws ParseException {
                                                                /*@bgen(jjtree) updateNullTypesFunctionCalls */
     ASTupdateNullTypesFunctionCalls jjtn000 = new ASTupdateNullTypesFunctionCalls(JJTUPDATENULLTYPESFUNCTIONCALLS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {HashMap<SymbolTable.Signature,SymbolTable.Function> functions = symbolTable.functions;

        for(SymbolTable.Signature signature: functions.keySet()) {

            SymbolTable.Function function = functions.get(signature);

            ArrayList<SymbolTable.Pair<String,SymbolTable.Signature>> nullDeclarationsFunctionCalls = function.nullDeclarationsFunctionCalls;

            for(SymbolTable.Pair<String,SymbolTable.Signature> nullDeclarationsFunctionCall : nullDeclarationsFunctionCalls) {

                SymbolTable.Signature functionCallSignature = nullDeclarationsFunctionCall.value;

                int argumentsSize = functionCallSignature.arguments.size();

                ArrayList<SimpleNode.Type> argumentTypesFunctionCall = new ArrayList<SimpleNode.Type>(argumentsSize);

                for(int i = 0; i < argumentsSize; i++) {

                    argumentTypesFunctionCall.add(SimpleNode.Type.INT);

                }

                for(int i = 0; i < argumentsSize; i++) {

                    if(functionCallSignature.argumentTypes.get(i) != null) {
                        argumentTypesFunctionCall.set(i, functionCallSignature.argumentTypes.get(i));
                    }
                    else {

                        String variable = functionCallSignature.arguments.get(i);

                        SimpleNode.Type type = symbolTable.globalDeclarations.get(variable);

                        if(type == null)
                            type = function.localDeclarations.get(variable);

                        argumentTypesFunctionCall.set(i, type);

                        if(type == null) {

                            System.out.println("Semantic Error: Variable " + variable + " not initialized " + "in " + functionCallSignature.functionName + " call on function " + function.signature.functionName);
                            continue;
                        }

                    }

                }

                SymbolTable.Signature signatureFunctionCall = new SymbolTable.Signature(argumentTypesFunctionCall,functionCallSignature.functionName);

                SymbolTable.Function functionFunctionCall = symbolTable.functions.get(signatureFunctionCall);

                if(functionFunctionCall == null) {

                    System.out.print("Semantic Error: Function " + signatureFunctionCall.functionName + "(");

                    for(int i = 0; i < signatureFunctionCall.argumentTypes.size(); i++) {
                        System.out.print(signatureFunctionCall.argumentTypes.get(i));

                        if(i < signatureFunctionCall.argumentTypes.size()-1)
                            System.out.print(", ");

                    }

                    System.out.println(") does not exist");
                    continue;

                }

            //Ver se já era global e se o tipo é o mesmo, se não for, meter nas repetidas, se ainda não tiver tipo, atribuir o do return
            //da função

                String nullFunctionCallAssignVariable = nullDeclarationsFunctionCall.key;
                SimpleNode.Type returnType = functionFunctionCall.returnType;

                if(symbolTable.globalDeclarations.containsKey(nullFunctionCallAssignVariable)) {

                    SimpleNode.Type currentType = symbolTable.globalDeclarations.get(nullFunctionCallAssignVariable);

                    symbolTable.addGlobalDeclaration(nullFunctionCallAssignVariable, returnType);
                    function.localDeclarations.remove(nullFunctionCallAssignVariable);

                }

                else {

                    SimpleNode.Type nullType = function.localDeclarations.get(nullFunctionCallAssignVariable);
                    function.localDeclarations.put(nullFunctionCallAssignVariable, returnType);

                }

            }

        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(31)) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(PVIRG)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public yal2jvmTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x80000000,0x100,0x84000100,0x8000,0x80000000,0x8000000,0x80000,0x80000000,0x8003000,0x3000,0x8000000,0x0,0x80000000,0x700,0x700,0x8c000100,0xc000000,0x100,0x0,0x80000000,0x4000000,0x8000000,0x4000,0x0,0x4c000000,0x0,0x4c000000,0x80000,0x4c000000,0x0,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x2,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public yal2jvm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public yal2jvm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public yal2jvm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public yal2jvm(yal2jvmTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(yal2jvmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
